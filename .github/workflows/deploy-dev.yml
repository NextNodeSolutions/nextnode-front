name: Deploy to Development

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  FLY_APP_NAME: nextnode-front-dev
  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
  DOMAIN_DEV: dev.nextnode.fr  # Replace with your actual domain

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

      - name: Run tests
        run: pnpm test

      - name: Build application
        run: pnpm build

  deploy:
    name: Deploy to Fly.io Dev
    runs-on: ubuntu-latest
    needs: test
    environment: development
    outputs:
      fly_url: ${{ steps.deploy_info.outputs.fly_url }}
      deployed: ${{ steps.deploy_info.outputs.deployed }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Initialize Fly.io App
        run: |
          # Allocate IP addresses if app has none
          if ! flyctl ips list --app ${{ env.FLY_APP_NAME }} 2>/dev/null | grep -q "v4\|v6"; then
            echo "🔧 Allocating IP addresses for first deployment..."
            flyctl ips allocate-v4 --app ${{ env.FLY_APP_NAME }}
            flyctl ips allocate-v6 --app ${{ env.FLY_APP_NAME }}
          else
            echo "✅ IP addresses already allocated"
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly.io
        run: |
          # Copy fly.toml and update app name for dev environment
          cp fly.toml fly.dev.toml
          sed -i 's/app = "nextnode-front"/app = "nextnode-front-dev"/' fly.dev.toml
          
          # Deploy with development configuration
          flyctl deploy --config fly.dev.toml --app ${{ env.FLY_APP_NAME }} --wait-timeout=10m
          
          # Clean up temporary config
          rm fly.dev.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health Check
        run: |
          echo "🏥 Performing health check..."
          
          # Wait for deployment to be ready
          sleep 30
          
          # Check Fly.io app health
          FLY_URL="https://${{ env.FLY_APP_NAME }}.fly.dev"
          
          if curl -f -s --max-time 30 "$FLY_URL" > /dev/null; then
            echo "✅ Fly.io deployment is healthy: $FLY_URL"
          else
            echo "❌ Fly.io deployment health check failed"
            exit 1
          fi

      - name: Set Deploy Info
        id: deploy_info
        run: |
          echo "fly_url=https://${{ env.FLY_APP_NAME }}.fly.dev" >> $GITHUB_OUTPUT
          echo "deployed=true" >> $GITHUB_OUTPUT

  dns:
    name: Configure DNS
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    outputs:
      dns_updated: ${{ steps.dns_check.outputs.updated }}
      custom_url: ${{ steps.dns_check.outputs.custom_url }}

    steps:
      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Get Current Fly.io IPs
        id: get_ips
        run: |
          # Get IPv4 and IPv6 addresses
          IPV4=$(flyctl ips list --app ${{ env.FLY_APP_NAME }} --json | jq -r '.[] | select(.Type == "v4") | .Address' | head -1)
          IPV6=$(flyctl ips list --app ${{ env.FLY_APP_NAME }} --json | jq -r '.[] | select(.Type == "v6") | .Address' | head -1)
          
          # Handle empty IPv6
          if [[ -z "$IPV6" || "$IPV6" == "null" ]]; then
            IPV6=""
          fi
          
          echo "ipv4=$IPV4" >> $GITHUB_OUTPUT
          echo "ipv6=$IPV6" >> $GITHUB_OUTPUT
          
          echo "📍 Current Fly.io IPs:"
          echo "  IPv4: $IPV4"
          echo "  IPv6: $IPV6"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Check Current DNS Records
        id: check_dns
        run: |
          # Get current DNS A record for dev subdomain
          CURRENT_IP=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records?name=${{ env.DOMAIN_DEV }}&type=A" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.result[0].content // ""')
          
          echo "current_ip=$CURRENT_IP" >> $GITHUB_OUTPUT
          echo "📍 Current DNS A record: $CURRENT_IP"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Configure Cloudflare DNS for Custom Domain
        id: dns_check
        run: |
          FLY_IP="${{ steps.get_ips.outputs.ipv4 }}"
          CURRENT_IP="${{ steps.check_dns.outputs.current_ip }}"
          CUSTOM_DOMAIN="${{ env.DOMAIN_DEV }}"
          
          echo "🌍 Configuring DNS for custom domain: $CUSTOM_DOMAIN"
          echo "Target IP: $FLY_IP (from Fly.io app: ${{ env.FLY_APP_NAME }})"
          
          if [[ "$FLY_IP" != "$CURRENT_IP" || -z "$CURRENT_IP" ]]; then
            echo "🔄 DNS update needed: $CURRENT_IP -> $FLY_IP"
            
            # Check if record exists for the custom domain
            RECORD_DATA=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records?name=$CUSTOM_DOMAIN&type=A" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json")
            
            RECORD_ID=$(echo "$RECORD_DATA" | jq -r '.result[0].id // ""')
            
            if [[ -n "$RECORD_ID" && "$RECORD_ID" != "null" ]]; then
              # Update existing A record
              echo "🔄 Updating existing A record for $CUSTOM_DOMAIN..."
              RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records/$RECORD_ID" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data "{
                  \"type\": \"A\",
                  \"name\": \"dev\",
                  \"content\": \"$FLY_IP\",
                  \"ttl\": 1,
                  \"proxied\": true,
                  \"comment\": \"NextNode Frontend Development -> Fly.io (${{ env.FLY_APP_NAME }}) - Updated $(date)\"
                }")
              
              if echo "$RESPONSE" | jq -r '.success' | grep -q true; then
                echo "✅ A record updated successfully"
              else
                echo "❌ Failed to update A record: $(echo "$RESPONSE" | jq -r '.errors[0].message')"
              fi
            else
              # Create new A record
              echo "➕ Creating new A record for $CUSTOM_DOMAIN..."
              RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data "{
                  \"type\": \"A\",
                  \"name\": \"dev\",
                  \"content\": \"$FLY_IP\",
                  \"ttl\": 1,
                  \"proxied\": true,
                  \"comment\": \"NextNode Frontend Development -> Fly.io (${{ env.FLY_APP_NAME }}) - Created $(date)\"
                }")
              
              if echo "$RESPONSE" | jq -r '.success' | grep -q true; then
                echo "✅ A record created successfully"
              else
                echo "❌ Failed to create A record: $(echo "$RESPONSE" | jq -r '.errors[0].message')"
              fi
            fi
            
            # Handle IPv6 if available
            IPV6="${{ steps.get_ips.outputs.ipv6 }}"
            if [[ -n "$IPV6" ]]; then
              echo "🔄 Configuring IPv6 (AAAA) record for $CUSTOM_DOMAIN..."
              AAAA_RECORD_DATA=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records?name=$CUSTOM_DOMAIN&type=AAAA" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json")
              
              AAAA_RECORD_ID=$(echo "$AAAA_RECORD_DATA" | jq -r '.result[0].id // ""')
              
              if [[ -n "$AAAA_RECORD_ID" && "$AAAA_RECORD_ID" != "null" ]]; then
                # Update existing AAAA record
                curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records/$AAAA_RECORD_ID" \
                  -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  --data "{
                    \"type\": \"AAAA\",
                    \"name\": \"dev\",
                    \"content\": \"$IPV6\",
                    \"ttl\": 1,
                    \"proxied\": true,
                    \"comment\": \"NextNode Frontend Development IPv6 -> Fly.io (${{ env.FLY_APP_NAME }}) - Updated $(date)\"
                  }" > /dev/null
                echo "✅ AAAA record updated"
              else
                # Create new AAAA record
                curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records" \
                  -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  --data "{
                    \"type\": \"AAAA\",
                    \"name\": \"dev\",
                    \"content\": \"$IPV6\",
                    \"ttl\": 1,
                    \"proxied\": true,
                    \"comment\": \"NextNode Frontend Development IPv6 -> Fly.io (${{ env.FLY_APP_NAME }}) - Created $(date)\"
                  }" > /dev/null
                echo "✅ AAAA record created"
              fi
            else
              echo "⚠️  No IPv6 available, skipping AAAA record"
            fi
            
            echo "updated=true" >> $GITHUB_OUTPUT
            echo "✅ Custom domain $CUSTOM_DOMAIN now points to Fly.io app ${{ env.FLY_APP_NAME }}"
          else
            echo "✅ DNS records are already up to date (IP: $FLY_IP)"
            echo "updated=false" >> $GITHUB_OUTPUT
          fi
          
          echo "custom_url=https://$CUSTOM_DOMAIN" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Setup SSL Certificate
        run: |
          # Check if certificate already exists
          if flyctl certs list --app ${{ env.FLY_APP_NAME }} | grep -q "${{ env.DOMAIN_DEV }}"; then
            echo "✅ SSL certificate already exists for ${{ env.DOMAIN_DEV }}"
          else
            echo "🔒 Creating SSL certificate for ${{ env.DOMAIN_DEV }}..."
            flyctl certs create ${{ env.DOMAIN_DEV }} --app ${{ env.FLY_APP_NAME }}
          fi
          
          # Show certificate status
          flyctl certs list --app ${{ env.FLY_APP_NAME }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  notify:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [test, deploy, dns]
    if: always()

    steps:
      - name: Final Summary
        run: |
          echo "🚀 Development Deployment Summary"
          echo "================================="
          echo ""
          echo "📋 Status Overview:"
          echo "  Tests: ${{ needs.test.result }}"
          echo "  Deploy: ${{ needs.deploy.result }}"
          echo "  DNS: ${{ needs.dns.result }}"
          echo ""
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Development deployment successful!"
            echo ""
            echo "🔗 Application URLs:"
            echo "  Fly.io: ${{ needs.deploy.outputs.fly_url }}"
            if [[ "${{ needs.dns.result }}" == "success" ]]; then
              echo "  Custom: ${{ needs.dns.outputs.custom_url }}"
              if [[ "${{ needs.dns.outputs.dns_updated }}" == "true" ]]; then
                echo "  🔄 DNS was updated during this deployment"
              else
                echo "  ✅ DNS was already up to date"
              fi
            else
              echo "  Custom: ${{ env.DOMAIN_DEV }} (⚠️  DNS configuration failed)"
            fi
            echo ""
            echo "📊 Monitoring:"
            echo "  Metrics: https://fly-metrics.net"
            echo "  Logs: flyctl logs --app ${{ env.FLY_APP_NAME }}"
            echo ""
            echo "⚙️  Environment: Development"
            echo "🌍 Region: cdg (Paris)"
            echo "📝 Branch: develop"
            echo "🔄 Commit: ${{ github.sha }}"
          else
            echo "❌ Development deployment failed"
            if [[ "${{ needs.test.result }}" != "success" ]]; then
              echo "  ❌ Tests failed"
            fi
            if [[ "${{ needs.deploy.result }}" != "success" ]]; then
              echo "  ❌ Fly.io deployment failed"
            fi
            exit 1
          fi
