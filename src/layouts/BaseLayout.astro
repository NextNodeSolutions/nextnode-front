---
import '../styles/global.css'
import '../styles/base.css'
import '../styles/animations.css'
import '../styles/liquid-effects.css'
import { ContextProvider } from '../lib/i18n/ContextProvider'
import SEO from '@/components/common/SEO.astro'

export interface Props {
	title: string
	description?: string
	image?: string
	type?: 'website' | 'article' | 'service'
	noindex?: boolean
}

// Use new i18n system from middleware
const { locale, t } = Astro.locals

const {
	title,
	description = t('common.meta.defaultDescription'),
	image = '/og-image.png',
	type = 'website',
	noindex = false,
} = Astro.props
---

<!doctype html>
<html lang={locale} class="scroll-smooth">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />

		<!-- SEO centralisÃ© avec Schema.org -->
		<SEO
			title={title}
			description={description}
			image={image}
			type={type}
			noindex={noindex}
		/>

		<!-- Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap"
			rel="stylesheet"
		/>

		<!-- Critical inline scripts to prevent FOUC -->
		<script is:inline>
			// Initialize theme immediately to prevent flash
			;(function () {
				const savedTheme = localStorage.getItem('theme')
				const systemPrefersDark = window.matchMedia(
					'(prefers-color-scheme: dark)',
				).matches

				const isDark =
					savedTheme === 'dark' || (!savedTheme && systemPrefersDark)

				if (isDark) {
					document.documentElement.classList.add('dark')
				} else {
					document.documentElement.classList.remove('dark')
				}

				// Store initial theme globally for later use
				window.initialTheme = isDark ? 'dark' : 'light'
			})()
		</script>

		<script is:inline define:vars={{ locale }}>
			// Initialize locale from server-provided data
			window.currentLanguage = locale
			window.currentLocale = locale
			document.documentElement.setAttribute('lang', locale)
		</script>
	</head>
	<body
		class="bg-white font-sans text-gray-900 antialiased dark:bg-gray-900 dark:text-gray-100"
	>
		<!-- Provide React i18n context to all components -->
		<ContextProvider client:load>
			<slot />
		</ContextProvider>

		<!-- Initialize client-side management modules -->
		<script>
			import { themeManager } from '@/lib/client/theme-manager'
			import { languageManager } from '@/lib/client/language-manager'

			// Initialize when DOM is ready
			const initializeManagers = () => {
				themeManager.init()
				languageManager.init()
			}

			if (document.readyState === 'loading') {
				document.addEventListener(
					'DOMContentLoaded',
					initializeManagers,
				)
			} else {
				initializeManagers()
			}
		</script>
	</body>
</html>
