---
import '../styles/global.css'
import '../styles/base.css'
import '../styles/animations.css'
import '../styles/liquid-effects.css'
import { ContextProvider } from '../lib/i18n/ContextProvider'
import SEO from '@/components/common/SEO.astro'

export interface Props {
	title: string
	description?: string
	image?: string
	type?: 'website' | 'article' | 'service'
	noindex?: boolean
}

// Use new i18n system from middleware
const { locale, t } = Astro.locals

const {
	title,
	description = t('common.meta.defaultDescription'),
	image = '/og-image.png',
	type = 'website',
	noindex = false,
} = Astro.props
---

<!doctype html>
<html lang={locale} class="scroll-smooth">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />

		<!-- SEO centralisÃ© avec Schema.org -->
		<SEO
			title={title}
			description={description}
			image={image}
			type={type}
			noindex={noindex}
		/>

		<!-- Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap"
			rel="stylesheet"
		/>

		<!-- Cal.com embed script - Simple approach -->
		<script is:inline>
			// Simple Cal.com integration
			;(function (C, A, L) {
				let p = function (a, ar) {
					a.q.push(ar)
				}
				let d = C.document
				C.Cal =
					C.Cal ||
					function () {
						let cal = C.Cal
						let ar = arguments
						if (!cal.loaded) {
							cal.q = cal.q || []
							p(cal, ar)
							return
						}
						let api = function () {
							let f = ar[0]
							if (f === 'ui') {
								f = 'embed-modal'
								ar[1] = ar[1] || {}
							}
							return api[f].apply(api, ar.slice(1))
						}
						api.loaded = true
						api.q = []
						p(api, ar)
						return api
					}
				C.Cal.ns = {}
				C.Cal.q = C.Cal.q || []
				d.head.appendChild(d.createElement('script')).src = A
			})(window, 'https://app.cal.com/embed/embed.js', 'Cal')

			// Global function to open Cal.com booking - Multiple approaches
			window.openCalBooking = function () {
				console.log('Opening Cal.com booking...')

				if (typeof window.Cal === 'function') {
					console.log(
						'Cal is available, trying different syntaxes...',
					)

					// Try method 1: modal
					try {
						console.log('Trying: Cal("modal", ...)')
						window.Cal('modal', { calLink: 'walid-mos' })
						return
					} catch (error) {
						console.log('Method 1 failed:', error)
					}

					// Try method 2: ui with embed-modal
					try {
						console.log('Trying: Cal("ui", ...)')
						window.Cal('ui', {
							calLink: 'walid-mos',
							config: { layout: 'month_view' },
						})
						return
					} catch (error) {
						console.log('Method 2 failed:', error)
					}

					// Try method 3: different syntax
					try {
						console.log('Trying: Cal("embed-modal", ...)')
						window.Cal('embed-modal', { calLink: 'walid-mos' })
						return
					} catch (error) {
						console.log('Method 3 failed:', error)
					}

					console.error('All Cal.com methods failed, using fallback')
				} else {
					console.error('Cal is not available')
				}

				// Fallback: direct link
				console.log('Opening fallback link')
				window.open('https://cal.com/walid-mos', '_blank')
			}

			// Wait for Cal to be ready
			function waitForCal() {
				if (typeof window.Cal === 'function') {
					console.log('Cal.com loaded and ready')
				} else {
					console.log('Waiting for Cal.com...')
					setTimeout(waitForCal, 100)
				}
			}

			setTimeout(waitForCal, 100)
		</script>

		<!-- Language initialization from server -->
		<script is:inline define:vars={{ currentLocale: locale }}>
			// Use server-provided locale instead of manual parsing
			window.currentLanguage = currentLocale

			// Ensure HTML lang attribute is consistent (should already be set)
			document.documentElement.setAttribute('lang', currentLocale)
		</script>

		<!-- Theme initialization -->
		<script is:inline>
			// Initialize theme immediately to prevent flash
			function initTheme() {
				const savedTheme = localStorage.getItem('theme')
				const systemPrefersDark = window.matchMedia(
					'(prefers-color-scheme: dark)',
				).matches

				const isDark =
					savedTheme === 'dark' || (!savedTheme && systemPrefersDark)

				if (isDark) {
					document.documentElement.classList.add('dark')
				} else {
					document.documentElement.classList.remove('dark')
				}

				// Store theme state globally for components to access
				window.initialTheme = isDark ? 'dark' : 'light'
			}
			initTheme()
		</script>
	</head>
	<body
		class="bg-white font-sans text-gray-900 antialiased dark:bg-gray-900 dark:text-gray-100"
	>
		<!-- Provide React i18n context to all components -->
		<ContextProvider client:load>
			<slot />
		</ContextProvider>

		<!-- Initialize React i18n context -->
		<script is:inline type="module" define:vars={{ locale }}>
			// Set global locale for React context access
			window.currentLocale = locale
		</script>

		<!-- Global theme and language management script -->
		<script>
			// Set current language globally
			window.currentLanguage = '{locale}'

			// Global language management
			window.languageManager = {
				getCurrentLanguage() {
					// Use the language set by server (already available globally)
					return window.currentLanguage || 'en'
				},

				changeLanguage(newLang: string) {
					// Set cookie for preference
					document.cookie = `preferred-locale=${newLang}; path=/; max-age=31536000` // 1 year

					// Build new URL using proper locale logic (mimicking getRelativeLocaleUrl)
					const currentPath = window.location.pathname
					const pathWithoutLang =
						currentPath.replace(/^\/(en|fr)/, '') || '/'

					let newPath
					if (newLang === 'en') {
						// English is default, no prefix needed
						newPath = pathWithoutLang
					} else {
						// French needs /fr prefix
						newPath = `/fr${pathWithoutLang}`
					}

					// Navigate to new URL
					window.location.href = newPath
				},

				init() {
					// Set initial language
					const currentLang = this.getCurrentLanguage()
					document.documentElement.setAttribute('lang', currentLang)

					// Set up language selector buttons
					const languageButtons =
						document.querySelectorAll('[data-lang]')
					languageButtons.forEach(button => {
						button.addEventListener('click', e => {
							e.preventDefault()
							const lang = button.getAttribute('data-lang')
							if (lang) {
								this.changeLanguage(lang)
							}
						})
					})
				},
			}

			// Global theme management
			window.themeManager = {
				getCurrentTheme() {
					const savedTheme = localStorage.getItem('theme')
					const systemPrefersDark = window.matchMedia(
						'(prefers-color-scheme: dark)',
					).matches
					return savedTheme === 'dark' ||
						(!savedTheme && systemPrefersDark)
						? 'dark'
						: 'light'
				},

				applyTheme(theme: string) {
					if (theme === 'dark') {
						document.documentElement.classList.add('dark')
					} else {
						document.documentElement.classList.remove('dark')
					}

					// Update all theme toggle icons (both desktop and mobile)
					const sunIcons =
						document.querySelectorAll('[id^="sun-icon"]')
					const moonIcons =
						document.querySelectorAll('[id^="moon-icon"]')

					sunIcons.forEach(sunIcon => {
						if (theme === 'dark') {
							sunIcon.classList.add('hidden')
						} else {
							sunIcon.classList.remove('hidden')
						}
					})

					moonIcons.forEach(moonIcon => {
						if (theme === 'dark') {
							moonIcon.classList.remove('hidden')
						} else {
							moonIcon.classList.add('hidden')
						}
					})
				},

				toggleTheme() {
					const currentTheme = this.getCurrentTheme()
					const newTheme = currentTheme === 'light' ? 'dark' : 'light'

					localStorage.setItem('theme', newTheme)
					this.applyTheme(newTheme)

					// Trigger custom event for other components
					window.dispatchEvent(
						new CustomEvent('theme-changed', {
							detail: { theme: newTheme },
						}),
					)
				},

				init() {
					// Set initial theme
					this.applyTheme(this.getCurrentTheme())

					// Listen for system theme changes
					const mediaQuery = window.matchMedia(
						'(prefers-color-scheme: dark)',
					)
					mediaQuery.addEventListener('change', e => {
						if (!localStorage.getItem('theme')) {
							this.applyTheme(e.matches ? 'dark' : 'light')
						}
					})

					// Set up all theme toggle buttons (both desktop and mobile)
					const themeToggleButtons = document.querySelectorAll(
						'[id^="theme-toggle"]',
					)
					themeToggleButtons.forEach(button => {
						button.addEventListener('click', () =>
							this.toggleTheme(),
						)
					})
				},
			}

			// Initialize language and theme management when DOM is ready
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', () => {
					window.languageManager.init()
					window.themeManager.init()
				})
			} else {
				window.languageManager.init()
				window.themeManager.init()
			}
		</script>
	</body>
</html>
