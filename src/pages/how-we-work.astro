---
import BaseLayout from '@/layouts/BaseLayout.astro'
import Header from '@/components/layout/header.astro'
import Footer from '@/components/layout/footer.astro'
import GradientCircle from '@/components/common/gradient-circle.astro'
import WorkflowJourney from '@/components/how-we-work/workflow-journey.astro'
import WorkflowStep from '@/components/how-we-work/workflow-step.astro'
import TechStackGrid from '@/components/how-we-work/tech-stack-grid.astro'
import TechnicalFaq from '@/components/how-we-work/technical-faq.astro'
import { StartProjectModal } from '@/components/marketing/start-project-modal'
import { t } from '@/lib/i18n-server'
import { generateDetailedSteps } from '@/lib/workflow-utils'
import { generatePageTitle, getCTAFeatures } from '@/lib/page-utils'

// Données de la page
const pageTitle = generatePageTitle(
	'howWeWork.hero.title',
	'howWeWork.hero.titleHighlight',
)
const pageDescription = t('howWeWork.hero.description')

// Étapes du workflow avec toutes les données
const steps = generateDetailedSteps()

// Features CTA
const ctaFeatures = getCTAFeatures()
---

<BaseLayout title={pageTitle} description={pageDescription}>
	<div class="relative flex min-h-screen flex-col">
		<Header />

		<!-- Hero Section -->
		<section
			class="relative overflow-hidden bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900/20"
		>
			<GradientCircle
				position="left"
				size="large"
				blur="high"
				opacity="low"
			/>
			<div class="relative mx-auto max-w-7xl px-6 py-24 sm:py-32 lg:px-8">
				<div class="mx-auto max-w-4xl text-center">
					<h1
						class="mb-6 text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl lg:text-7xl dark:text-white"
					>
						{t('howWeWork.hero.title')}
						<span
							class="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent"
						>
							{t('howWeWork.hero.titleHighlight')}
						</span>
					</h1>
					<p
						class="mb-10 text-xl leading-8 text-gray-600 dark:text-gray-300"
					>
						{t('howWeWork.hero.description')}
					</p>
					<div class="flex justify-center">
						<StartProjectModal client:load />
					</div>
				</div>
			</div>
		</section>

		<!-- Journey Section -->
		<section class="relative py-6 sm:py-8">
			<div class="mx-auto max-w-7xl px-6 lg:px-8">
				<div class="mx-auto mb-8 max-w-2xl text-center">
					<h2
						class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl dark:text-white"
					>
						{t('howWeWork.journey.title')}
					</h2>
					<p
						class="mt-4 text-lg leading-8 text-gray-600 dark:text-gray-300"
					>
						{t('howWeWork.journey.subtitle')}
					</p>
				</div>

				<!-- SVG Journey Path -->
				<WorkflowJourney steps={steps} />
			</div>
		</section>

		<!-- Detailed Steps Section -->
		<section class="bg-gray-50 py-24 sm:py-32 dark:bg-gray-900/50">
			<div class="mx-auto max-w-7xl px-6 lg:px-8">
				<div class="grid gap-16 lg:gap-24">
					{
						steps.map((step, index) => (
							<WorkflowStep
								step={step}
								index={index}
								isReversed={index % 2 === 1}
							/>
						))
					}
				</div>
			</div>
		</section>

		<!-- Tech Stack Section -->
		<section class="py-24 sm:py-32">
			<div class="mx-auto max-w-7xl px-6 lg:px-8">
				<div class="mx-auto mb-16 max-w-2xl text-center">
					<h2
						class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl dark:text-white"
					>
						{t('howWeWork.techStack.title')}
					</h2>
					<p
						class="mt-4 text-lg leading-8 text-gray-600 dark:text-gray-300"
					>
						{t('howWeWork.techStack.subtitle')}
					</p>
					<p class="mt-6 text-base text-gray-600 dark:text-gray-400">
						{t('howWeWork.techStack.description')}
					</p>
				</div>

				<TechStackGrid />
			</div>
		</section>

		<!-- FAQ Section -->
		<section class="bg-gray-50 py-24 sm:py-32 dark:bg-gray-900/50">
			<div class="mx-auto max-w-4xl px-6 lg:px-8">
				<div class="mx-auto mb-16 max-w-2xl text-center">
					<h2
						class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl dark:text-white"
					>
						{t('howWeWork.faq.title')}
					</h2>
					<p
						class="mt-4 text-lg leading-8 text-gray-600 dark:text-gray-300"
					>
						{t('howWeWork.faq.subtitle')}
					</p>
				</div>

				<TechnicalFaq />
			</div>
		</section>

		<!-- Final CTA Section -->
		<section
			class="relative overflow-hidden bg-gradient-to-r from-blue-600 to-purple-600"
		>
			<GradientCircle
				position="right"
				size="medium"
				blur="medium"
				opacity="low"
			/>
			<div class="relative mx-auto max-w-7xl px-6 py-24 sm:py-32 lg:px-8">
				<div class="mx-auto max-w-2xl text-center">
					<h2
						class="text-3xl font-bold tracking-tight text-white sm:text-4xl"
					>
						{t('howWeWork.cta.title')}
					</h2>
					<p class="mt-6 text-lg leading-8 text-blue-100">
						{t('howWeWork.cta.description')}
					</p>

					<!-- Features List -->
					<div class="mt-8 space-y-3">
						{
							ctaFeatures.map((feature: string) => (
								<p class="text-blue-100">{feature}</p>
							))
						}
					</div>

					<!-- CTA Buttons -->
					<div class="mt-10 flex items-center justify-center gap-6">
						<StartProjectModal client:load />
						<a
							href="/contact"
							class="rounded-md border border-white/20 bg-white/10 px-6 py-3 text-sm font-semibold text-white shadow-sm backdrop-blur-sm hover:bg-white/20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white"
						>
							{t('howWeWork.cta.secondaryButton')}
						</a>
					</div>
				</div>
			</div>
		</section>

		<Footer />
	</div>
</BaseLayout>

<style>
	/* Animation pour révéler les sections au scroll */
	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(30px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.animate-fade-in-up {
		animation: fadeInUp 0.6s ease-out forwards;
	}

	/* Hover effects pour les cards */
	.hover-lift {
		transition:
			transform 0.3s ease,
			box-shadow 0.3s ease;
	}

	.hover-lift:hover {
		transform: translateY(-4px);
		box-shadow:
			0 20px 25px -5px rgba(0, 0, 0, 0.1),
			0 10px 10px -5px rgba(0, 0, 0, 0.04);
	}
</style>

<script>
	// Animation au scroll avec Intersection Observer
	const observerOptions = {
		threshold: 0.1,
		rootMargin: '0px 0px -50px 0px',
	}

	const observer = new IntersectionObserver(entries => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				entry.target.classList.add('animate-fade-in-up')
			}
		})
	}, observerOptions)

	// Observer toutes les sections
	document.addEventListener('DOMContentLoaded', () => {
		const sections = document.querySelectorAll('section')
		sections.forEach(section => {
			observer.observe(section)
		})
	})
</script>
