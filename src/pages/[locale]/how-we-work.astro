---
import BaseLayout from '@/layouts/BaseLayout.astro'
import Header from '@/components/layout/header.astro'
import Footer from '@/components/layout/footer.astro'
import GradientCircle from '@/components/common/gradient-circle.astro'
import WorkflowJourney from '@/components/how-we-work/workflow-journey.astro'
import MobileTimeline from '@/components/how-we-work/MobileTimeline.astro'
import TechnicalFaq from '@/components/how-we-work/technical-faq.astro'
import WorkflowJourneyInteractive from '@/components/how-we-work/WorkflowJourneyInteractive'
import { StartProjectModal } from '@/components/marketing/start-project-modal'
import { t, initI18n } from '@/lib/i18n-server'
import { generateDetailedSteps, generateSteps } from '@/lib/workflow-utils'
import { generatePageTitle } from '@/lib/page-utils'
import { STEP_COLORS } from '@/lib/workflow-constants'

// Get language from route parameter
// For [...locale], the parameter can be undefined (for root path) or an array
const localeParam = Astro.params.locale
const locale = Array.isArray(localeParam) ? localeParam[0] : localeParam || 'en'
await initI18n(Astro.request, locale)

// Données de la page
const pageTitle = generatePageTitle(
	'howWeWork.hero.title',
	'howWeWork.hero.titleHighlight',
)
const pageDescription = t('howWeWork.hero.description')

// Étapes du workflow avec toutes les données
const steps = generateDetailedSteps()
const simpleSteps = generateSteps()
---

<BaseLayout title={pageTitle} description={pageDescription}>
	<div class="relative flex min-h-screen flex-col">
		<Header />

		<!-- Hero Section -->
		<section
			class="relative overflow-hidden bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900/20"
		>
			<GradientCircle
				position="left"
				size="large"
				blur="high"
				opacity="low"
			/>
			<div
				class="relative mx-auto max-w-7xl px-6 pt-32 pb-8 sm:pt-40 sm:pb-8 lg:pt-48 lg:pb-8"
			>
				<div class="mx-auto max-w-4xl text-center">
					<h1
						class="mb-6 text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl lg:text-7xl dark:text-white"
					>
						{t('howWeWork.hero.title')}
						<span
							class="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent"
						>
							{t('howWeWork.hero.titleHighlight')}
						</span>
					</h1>
					<p
						class="mb-16 text-xl leading-8 text-gray-600 dark:text-gray-300"
					>
						{t('howWeWork.hero.description')}
					</p>
				</div>

				<!-- Workflow Journey - Responsive Switch -->
				<div class="mx-auto max-w-7xl">
					<!-- Desktop/Tablet SVG Version (md and up) -->
					<div class="hidden md:block">
						<WorkflowJourney steps={steps} />
					</div>

					<!-- Mobile Timeline Version (sm and down) -->
					<div class="block md:hidden">
						<MobileTimeline />
					</div>
				</div>

				<!-- Interactive Modal System - Shared for both versions -->
				<WorkflowJourneyInteractive
					steps={simpleSteps}
					detailedSteps={steps}
					colors={STEP_COLORS}
					client:load
				/>
			</div>
		</section>

		<!-- FAQ Section -->
		<section class="bg-gray-50 py-24 sm:py-32 dark:bg-gray-900/50">
			<div class="mx-auto max-w-4xl px-6 lg:px-8">
				<div class="mx-auto mb-16 max-w-2xl text-center">
					<h2
						class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl dark:text-white"
					>
						{t('howWeWork.faq.title')}
					</h2>
					<p
						class="mt-4 text-lg leading-8 text-gray-600 dark:text-gray-300"
					>
						{t('howWeWork.faq.subtitle')}
					</p>
				</div>

				<TechnicalFaq />
			</div>
		</section>

		<Footer />
	</div>
</BaseLayout>

<style>
	/* Animation pour révéler les sections au scroll */
	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(30px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.animate-fade-in-up {
		animation: fadeInUp 0.6s ease-out forwards;
	}

	/* Hover effects pour les cards */
	.hover-lift {
		transition:
			transform 0.3s ease,
			box-shadow 0.3s ease;
	}

	.hover-lift:hover {
		transform: translateY(-4px);
		box-shadow:
			0 20px 25px -5px rgba(0, 0, 0, 0.1),
			0 10px 10px -5px rgba(0, 0, 0, 0.04);
	}
</style>

<script>
	// Animation au scroll avec Intersection Observer
	const observerOptions = {
		threshold: 0.1,
		rootMargin: '0px 0px -50px 0px',
	}

	const observer = new IntersectionObserver(entries => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				entry.target.classList.add('animate-fade-in-up')
			}
		})
	}, observerOptions)

	// Observer toutes les sections
	document.addEventListener('DOMContentLoaded', () => {
		const sections = document.querySelectorAll('section')
		sections.forEach(section => {
			observer.observe(section)
		})
	})
</script>
