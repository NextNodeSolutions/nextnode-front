---
import { languages } from '@/lib/constants'
import { ChevronDown, Sun, Moon } from 'lucide-react'
import { t } from '@/lib/astro-i18n'
---

<div class="flex items-center space-x-6">
	<!-- Theme Toggle -->
	<button
		id="theme-toggle-desktop"
		class="rounded-full p-1.5 text-gray-600 transition-all duration-300 hover:scale-110 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white"
		aria-label={t('ui.toggleTheme')}
	>
		<Sun id="sun-icon-desktop" className="h-4 w-4" />
		<Moon id="moon-icon-desktop" className="hidden h-4 w-4" />
	</button>

	<!-- Desktop Language Selector with Dropdown -->
	<div class="group relative">
		<button
			class="flex items-center space-x-1.5 text-gray-600 transition-all duration-300 hover:scale-105 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white"
			aria-label={t('ui.selectLanguage')}
			id="current-language-desktop"
		>
			<span class="text-base" id="current-flag-desktop">ðŸ‡¬ðŸ‡§</span>
			<span class="text-xs" id="current-lang-desktop">EN</span>
			<ChevronDown
				className="h-3 w-3 transition-transform duration-300 group-hover:rotate-180"
			/>
		</button>
		<div
			class="invisible absolute right-0 mt-2 w-40 translate-y-2 transform rounded-lg border border-white/20 bg-white/80 opacity-0 shadow-lg backdrop-blur-md transition-all duration-300 group-hover:visible group-hover:translate-y-0 group-hover:opacity-100 dark:border-gray-600/20 dark:bg-gray-800/80 dark:backdrop-blur-md"
		>
			{
				languages.map(lang => (
					<button
						data-lang={lang.code}
						class="flex w-full items-center space-x-2 px-4 py-2 text-gray-600 transition-all duration-300 hover:translate-x-1 hover:bg-white/60 hover:text-gray-900 dark:text-gray-100 dark:hover:bg-gray-700/60 dark:hover:text-white"
					>
						<span class="text-lg">{lang.flag}</span>
						<span>{lang.label}</span>
					</button>
				))
			}
		</div>
	</div>
</div>

<!-- Initialize icons with correct state -->
<script is:inline>
	// Immediately set correct icon state
	;(function () {
		const savedTheme = localStorage.getItem('theme')
		const systemPrefersDark = window.matchMedia(
			'(prefers-color-scheme: dark)',
		).matches
		const isDark =
			savedTheme === 'dark' || (!savedTheme && systemPrefersDark)

		const sunIcon = document.getElementById('sun-icon-desktop')
		const moonIcon = document.getElementById('moon-icon-desktop')

		if (sunIcon && moonIcon) {
			if (isDark) {
				sunIcon.classList.add('hidden')
				moonIcon.classList.remove('hidden')
			} else {
				sunIcon.classList.remove('hidden')
				moonIcon.classList.add('hidden')
			}
		}
	})()
</script>

<!-- Initialize language selector with correct state -->
<script is:inline>
	// Immediately set correct language state
	;(function () {
		const savedLang = localStorage.getItem('language')
		const browserLang = navigator.language.split('-')[0]
		const supportedLangs = ['en', 'fr']

		let currentLang = 'en'
		if (savedLang && supportedLangs.includes(savedLang)) {
			currentLang = savedLang
		} else if (supportedLangs.includes(browserLang)) {
			currentLang = browserLang
		}

		// Desktop version - update dropdown display
		const flagElement = document.getElementById('current-flag-desktop')
		const langElement = document.getElementById('current-lang-desktop')

		if (flagElement && langElement) {
			if (currentLang === 'fr') {
				flagElement.textContent = 'ðŸ‡«ðŸ‡·'
				langElement.textContent = 'FR'
			} else {
				flagElement.textContent = 'ðŸ‡¬ðŸ‡§'
				langElement.textContent = 'EN'
			}
		}
	})()
</script>
