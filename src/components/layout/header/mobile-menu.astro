---
import { cn } from '@/lib/utils'
import Navigation from './navigation.astro'
import Controls from './controls.astro'
import Logo from './logo.astro'
import MobileButton from './mobile-button.astro'

interface Props {
	links: { href: string; label: string }[]
}

const { links } = Astro.props
---

<div
	class="invisible fixed inset-0 z-50 bg-black/20 opacity-0 backdrop-blur-sm transition-all duration-300 md:hidden"
	id="mobile-menu"
>
	<div
		class="absolute inset-y-0 left-0 w-full max-w-sm -translate-x-full transform bg-white shadow-xl transition-transform duration-300 ease-out"
		id="mobile-menu-panel"
	>
		<div class="flex h-full flex-col">
			<div class="border-b border-gray-200">
				<div class="px-4 sm:px-6 lg:px-8">
					<div class="flex h-12 items-center justify-between">
						<Logo variant="mobile" />
						<MobileButton action="close" />
					</div>
				</div>
			</div>

			<Navigation links={links} variant="mobile" />

			<div class="mt-auto px-4 py-4 sm:px-6 lg:px-8">
				<Controls variant="mobile" />
			</div>
		</div>
	</div>
</div>

<script>
	// Mobile menu toggle functionality
	const mobileMenuOpenButton = document.getElementById(
		'mobile-menu-open-button',
	)
	const mobileMenuCloseButton = document.getElementById(
		'mobile-menu-close-button',
	)
	const mobileMenu = document.getElementById('mobile-menu')
	const mobileMenuPanel = document.getElementById('mobile-menu-panel')

	function openMobileMenu() {
		if (mobileMenu && mobileMenuPanel) {
			mobileMenu.classList.remove('opacity-0', 'invisible')
			mobileMenu.classList.add('opacity-100', 'visible')
			// DÃ©lai pour permettre au fond de s'afficher avant de faire glisser le panneau
			setTimeout(() => {
				mobileMenuPanel.classList.remove('-translate-x-full')
				mobileMenuPanel.classList.add('translate-x-0')
			}, 50)
			// Prevent body scrolling when menu is open
			document.body.style.overflow = 'hidden'
		}
	}

	function closeMobileMenu() {
		if (mobileMenu && mobileMenuPanel) {
			mobileMenuPanel.classList.add('-translate-x-full')
			mobileMenuPanel.classList.remove('translate-x-0')
			// Attendre la fin de l'animation de slide avant de cacher le fond
			setTimeout(() => {
				mobileMenu.classList.add('opacity-0', 'invisible')
				mobileMenu.classList.remove('opacity-100', 'visible')
			}, 300)
			// Restore body scrolling when menu is closed
			document.body.style.overflow = ''
		}
	}

	// Open button event listener
	if (mobileMenuOpenButton) {
		mobileMenuOpenButton.addEventListener('click', openMobileMenu)
	}

	// Close button event listener
	if (mobileMenuCloseButton) {
		mobileMenuCloseButton.addEventListener('click', closeMobileMenu)
	}

	// Close menu when clicking on overlay
	if (mobileMenu) {
		mobileMenu.addEventListener('click', e => {
			// Only close if clicking on the overlay itself, not on menu content
			if (e.target === mobileMenu) {
				closeMobileMenu()
			}
		})
	}

	// Close menu with Escape key
	document.addEventListener('keydown', e => {
		if (
			e.key === 'Escape' &&
			mobileMenu &&
			mobileMenu.classList.contains('opacity-100')
		) {
			closeMobileMenu()
		}
	})
</script>
