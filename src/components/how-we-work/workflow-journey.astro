---
import { t } from '@/lib/i18n-server'

// Les √©tapes avec leurs donn√©es depuis les traductions
const stepKeys = [
	'discovery',
	'design',
	'development',
	'testing',
	'deployment',
	'support',
]
const steps = stepKeys.map(key => ({
	key,
	...t(`howWeWork.steps.${key}`),
	icon: {
		discovery: 'üîç',
		design: 'üé®',
		development: '‚ö°',
		testing: 'üß™',
		deployment: 'üöÄ',
		support: 'üõ†Ô∏è',
	}[key],
}))

// Couleurs pour chaque √©tape
const colors = [
	'#6366f1',
	'#8b5cf6',
	'#10b981',
	'#f59e0b',
	'#ef4444',
	'#6b7280',
]
---

<div class="workflow-journey w-full py-8 md:py-12 lg:py-16">
	<div class="container mx-auto px-4">
		<div class="mb-12 text-center">
			<h2
				class="mb-4 text-3xl font-bold text-gray-900 md:text-4xl dark:text-white"
			>
				{t('howWeWork.journey.title')}
			</h2>
			<p
				class="mx-auto max-w-2xl text-lg text-gray-600 dark:text-gray-300"
			>
				{t('howWeWork.journey.subtitle')}
			</p>
		</div>
		<svg
			class="h-[500px] w-full md:h-[600px] lg:h-[700px]"
			viewBox="0 0 1000 500"
			style="overflow: visible;"
			xmlns="http://www.w3.org/2000/svg"
		>
			<defs>
				<linearGradient
					id="pathGradient"
					x1="0%"
					y1="0%"
					x2="100%"
					y2="100%"
				>
					<stop
						offset="0%"
						style={`stop-color:${colors[0]};stop-opacity:0.8`}
					></stop>
					<stop
						offset="20%"
						style={`stop-color:${colors[1]};stop-opacity:0.8`}
					></stop>
					<stop
						offset="40%"
						style={`stop-color:${colors[2]};stop-opacity:0.8`}
					></stop>
					<stop
						offset="60%"
						style={`stop-color:${colors[3]};stop-opacity:0.8`}
					></stop>
					<stop
						offset="80%"
						style={`stop-color:${colors[4]};stop-opacity:0.8`}
					></stop>
					<stop
						offset="100%"
						style={`stop-color:${colors[5]};stop-opacity:0.8`}
					></stop>
				</linearGradient>

				<filter
					id="dropShadow"
					x="-50%"
					y="-50%"
					width="200%"
					height="200%"
				>
					<feDropShadow
						dx="0"
						dy="4"
						stdDeviation="8"
						flood-opacity="0.1"></feDropShadow>
				</filter>
			</defs>

			<path
				d="M 80 60 L 350 75 C 480 85 520 100 510 140 C 500 180 420 195 320 185 C 240 175 200 180 205 220 C 210 260 250 275 320 265 L 420 255 C 560 245 600 260 590 300 C 580 340 620 355 700 365 L 880 385"
				stroke="url(#pathGradient)"
				stroke-width="4"
				fill="none"
				stroke-dasharray="12,6"
				opacity="0.7"
			>
				<animate
					attributeName="stroke-dashoffset"
					values="18;0"
					dur="2s"
					repeatCount="indefinite"></animate>
			</path>

			<path
				d="M 80 60 L 350 75 C 480 85 520 100 510 140 C 500 180 420 195 320 185 C 240 175 200 180 205 220 C 210 260 250 275 320 265 L 420 255 C 560 245 600 260 590 300 C 580 340 620 355 700 365 L 880 385"
				stroke="#f1f5f9"
				stroke-width="8"
				fill="none"
				opacity="0.3"></path>
			{
				steps.map((step, index) => {
					const positions = [
						{
							x: 80,
							y: 60,
							cardX: 50,
							cardY: -30,
							lineX: 80,
							lineY: 30,
							lineEndX: 80,
							lineEndY: 30,
							direction: 'top',
						},
						{
							x: 220,
							y: 67,
							cardX: 190,
							cardY: -23,
							lineX: 220,
							lineY: 37,
							lineEndX: 220,
							lineEndY: 37,
							direction: 'top',
						},
						{
							x: 510,
							y: 140,
							cardX: 540,
							cardY: 110,
							lineX: 540,
							lineY: 140,
							lineEndX: 540,
							lineEndY: 140,
							direction: 'right',
						},
						{
							x: 205,
							y: 220,
							cardX: 105,
							cardY: 190,
							lineX: 175,
							lineY: 220,
							lineEndX: 165,
							lineEndY: 220,
							direction: 'left',
						},
						{
							x: 590,
							y: 300,
							cardX: 500,
							cardY: 270,
							lineX: 560,
							lineY: 300,
							lineEndX: 560,
							lineEndY: 300,
							direction: 'left',
						},
						{
							x: 880,
							y: 385,
							cardX: 850,
							cardY: 295,
							lineX: 880,
							lineY: 355,
							lineEndX: 880,
							lineEndY: 355,
							direction: 'top',
						},
					]

					const pos = positions[index]
					const color = colors[index]

					return (
						<g class="step-card-group">
							{/* Ligne de connexion √©l√©gante */}
							<line
								x1={pos.x}
								y1={pos.y}
								x2={pos.lineEndX}
								y2={pos.lineEndY}
								stroke={color}
								stroke-width="3"
								opacity="1"
							/>

							{/* Card carr√©e moderne */}
							<g
								transform={`translate(${pos.cardX}, ${pos.cardY})`}
							>
								<rect
									x="2"
									y="2"
									width="60"
									height="60"
									rx="12"
									fill="rgba(0,0,0,0.1)"
									opacity="0.3"
								/>

								{/* Background gradient */}
								<defs>
									<linearGradient
										id={`cardGradient${index}`}
										x1="0%"
										y1="0%"
										x2="100%"
										y2="100%"
									>
										<stop
											offset="0%"
											style={`stop-color:${color};stop-opacity:1`}
										/>
										<stop
											offset="100%"
											style={`stop-color:${color};stop-opacity:0.8`}
										/>
									</linearGradient>
								</defs>

								<rect
									x="0"
									y="0"
									width="60"
									height="60"
									rx="12"
									fill={`url(#cardGradient${index})`}
									filter="url(#dropShadow)"
								/>

								<g opacity="0.2">
									<circle
										cx="15"
										cy="15"
										r="2"
										fill="white"
									/>
									<circle
										cx="45"
										cy="15"
										r="1.5"
										fill="white"
									/>
									<circle
										cx="15"
										cy="45"
										r="1.5"
										fill="white"
									/>
									<circle
										cx="45"
										cy="45"
										r="2"
										fill="white"
									/>
								</g>

								<text
									x="30"
									y="35"
									text-anchor="middle"
									class="fill-white text-lg font-bold"
									dominant-baseline="middle"
								>
									{step.icon}
								</text>

								<circle
									cx="50"
									cy="10"
									r="8"
									fill="rgba(255,255,255,0.9)"
								/>
								<text
									x="50"
									y="10"
									text-anchor="middle"
									class="fill-gray-800 text-xs font-black"
									dominant-baseline="middle"
									dy="1"
								>
									{step.number}
								</text>

								<text
									x="30"
									y="75"
									text-anchor="middle"
									class="fill-gray-800 text-xs font-semibold dark:fill-white"
									dominant-baseline="middle"
								>
									{step.title}
								</text>
							</g>

							<circle
								cx={pos.x}
								cy={pos.y}
								r="6"
								fill={color}
								stroke="white"
								stroke-width="3"
							/>
						</g>
					)
				})
			}
		</svg>
	</div>
</div>

<style>
	/* Styles simples et propres pour le workflow journey */
	.workflow-journey {
		user-select: none;
	}

	.step-card-group {
		opacity: 1;
	}

	/* Responsive adjustments */
	@media (max-width: 768px) {
		.workflow-journey svg {
			height: 400px;
		}
	}
</style>
