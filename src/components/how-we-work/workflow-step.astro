---
export interface Props {
	step: {
		id: string
		title: string
		number: string
		description: string
		details: string[]
		deliverables: string
		duration: string
		icon: string
	}
	index: number
	isReversed?: boolean
}

const { step, index, isReversed = false } = Astro.props
---

<div
	class="workflow-step-container translate-y-8 opacity-0 transition-all duration-700 ease-out"
	data-step-index={index}
>
	<div
		class={`flex flex-col ${isReversed ? 'lg:flex-row-reverse' : 'lg:flex-row'} items-center gap-8 lg:gap-16`}
	>
		<!-- Contenu textuel -->
		<div class="max-w-2xl flex-1">
			<div class="mb-6 flex items-center gap-4">
				<!-- Numéro de l'étape -->
				<div class="relative">
					<div
						class="flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-blue-500 to-purple-600 shadow-lg"
					>
						<span class="text-xl font-bold text-white"
							>{step.number}</span
						>
					</div>
					<!-- Pulse effect -->
					<div
						class="absolute inset-0 h-16 w-16 animate-ping rounded-full bg-gradient-to-br from-blue-500 to-purple-600 opacity-20"
					>
					</div>
				</div>

				<!-- Titre et icône -->
				<div>
					<div class="mb-2 text-4xl">{step.icon}</div>
					<h3
						class="text-2xl font-bold text-gray-900 lg:text-3xl dark:text-white"
					>
						{step.title}
					</h3>
				</div>
			</div>

			<!-- Description -->
			<p
				class="mb-8 text-lg leading-relaxed text-gray-600 dark:text-gray-300"
			>
				{step.description}
			</p>

			<!-- Détails de l'étape -->
			<div class="space-y-6">
				<!-- Liste des tâches -->
				<div>
					<h4
						class="mb-4 flex items-center gap-2 text-sm font-semibold tracking-wide text-gray-900 uppercase dark:text-white"
					>
						<svg
							class="h-4 w-4 text-blue-500"
							fill="currentColor"
							viewBox="0 0 20 20"
						>
							<path
								fill-rule="evenodd"
								d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
								clip-rule="evenodd"></path>
						</svg>
						Tâches principales
					</h4>
					<ul class="space-y-3">
						{
							step.details.map((detail, detailIndex) => (
								<li class="group flex items-start gap-3">
									<div class="mt-2 h-2 w-2 flex-shrink-0 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 transition-transform duration-200 group-hover:scale-125" />
									<span class="text-gray-700 transition-colors duration-200 group-hover:text-gray-900 dark:text-gray-300 dark:group-hover:text-white">
										{detail}
									</span>
								</li>
							))
						}
					</ul>
				</div>

				<!-- Informations sur les livrables et durée -->
				<div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
					<div
						class="rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-800 dark:bg-blue-900/20"
					>
						<h4
							class="mb-2 flex items-center gap-2 text-xs font-semibold tracking-wide text-blue-900 uppercase dark:text-blue-100"
						>
							<svg
								class="h-4 w-4"
								fill="currentColor"
								viewBox="0 0 20 20"
							>
								<path
									fill-rule="evenodd"
									d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z"
									clip-rule="evenodd"></path>
							</svg>
							Livrables
						</h4>
						<p class="text-sm text-blue-800 dark:text-blue-200">
							{step.deliverables}
						</p>
					</div>

					<div
						class="rounded-lg border border-purple-200 bg-purple-50 p-4 dark:border-purple-800 dark:bg-purple-900/20"
					>
						<h4
							class="mb-2 flex items-center gap-2 text-xs font-semibold tracking-wide text-purple-900 uppercase dark:text-purple-100"
						>
							<svg
								class="h-4 w-4"
								fill="currentColor"
								viewBox="0 0 20 20"
							>
								<path
									fill-rule="evenodd"
									d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
									clip-rule="evenodd"></path>
							</svg>
							Durée estimée
						</h4>
						<p
							class="text-sm font-medium text-purple-800 dark:text-purple-200"
						>
							{step.duration}
						</p>
					</div>
				</div>
			</div>
		</div>

		<!-- Illustration/Schéma visuel -->
		<div class="flex-shrink-0 lg:w-96">
			<div class="group relative">
				<!-- Container principal avec gradient border -->
				<div
					class="relative overflow-hidden rounded-2xl border border-gray-200 bg-white p-8 shadow-xl transition-all duration-300 hover:shadow-2xl dark:border-gray-700 dark:bg-gray-800"
				>
					<!-- Background pattern -->
					<div class="absolute inset-0 opacity-5">
						<svg
							class="h-full w-full"
							viewBox="0 0 100 100"
							xmlns="http://www.w3.org/2000/svg"
						>
							<defs>
								<pattern
									id={`pattern-${step.id}`}
									x="0"
									y="0"
									width="20"
									height="20"
									patternUnits="userSpaceOnUse"
								>
									<circle
										cx="10"
										cy="10"
										r="1"
										fill="currentColor"></circle>
								</pattern>
							</defs>
							<rect
								width="100"
								height="100"
								fill={`url(#pattern-${step.id})`}></rect>
						</svg>
					</div>

					<!-- Contenu de l'illustration -->
					<div class="relative z-10">
						<!-- Icône principale centrée -->
						<div class="mb-6 flex justify-center">
							<div
								class="flex h-20 w-20 items-center justify-center rounded-2xl bg-gradient-to-br from-blue-100 to-purple-100 transition-transform duration-300 group-hover:scale-110 dark:from-blue-900 dark:to-purple-900"
							>
								<span class="text-4xl">{step.icon}</span>
							</div>
						</div>

						<!-- Graphique/schéma spécifique à chaque étape -->
						{
							step.id === 'discovery' && (
								<div class="space-y-4">
									<div class="flex items-center justify-between">
										<div class="flex items-center gap-2">
											<div class="h-3 w-3 rounded-full bg-blue-500" />
											<span class="text-xs text-gray-600 dark:text-gray-400">
												Research
											</span>
										</div>
										<div class="mx-3 h-1 flex-1 rounded bg-gradient-to-r from-blue-500 to-blue-300" />
										<span class="text-xs text-gray-500">
											100%
										</span>
									</div>
									<div class="flex items-center justify-between">
										<div class="flex items-center gap-2">
											<div class="h-3 w-3 rounded-full bg-purple-500" />
											<span class="text-xs text-gray-600 dark:text-gray-400">
												Analysis
											</span>
										</div>
										<div class="mx-3 h-1 flex-1 rounded bg-gradient-to-r from-purple-500 to-purple-300" />
										<span class="text-xs text-gray-500">
											95%
										</span>
									</div>
									<div class="flex items-center justify-between">
										<div class="flex items-center gap-2">
											<div class="h-3 w-3 rounded-full bg-pink-500" />
											<span class="text-xs text-gray-600 dark:text-gray-400">
												Planning
											</span>
										</div>
										<div class="mx-3 h-1 flex-1 rounded bg-gradient-to-r from-pink-500 to-pink-300" />
										<span class="text-xs text-gray-500">
											90%
										</span>
									</div>
								</div>
							)
						}

						{
							step.id === 'design' && (
								<div class="grid grid-cols-2 gap-3">
									<div class="flex aspect-square items-center justify-center rounded-lg bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800">
										<span class="text-xs text-blue-700 dark:text-blue-300">
											Mobile
										</span>
									</div>
									<div class="flex aspect-square items-center justify-center rounded-lg bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900 dark:to-purple-800">
										<span class="text-xs text-purple-700 dark:text-purple-300">
											Desktop
										</span>
									</div>
									<div class="flex aspect-square items-center justify-center rounded-lg bg-gradient-to-br from-pink-100 to-pink-200 dark:from-pink-900 dark:to-pink-800">
										<span class="text-xs text-pink-700 dark:text-pink-300">
											Tablet
										</span>
									</div>
									<div class="flex aspect-square items-center justify-center rounded-lg bg-gradient-to-br from-indigo-100 to-indigo-200 dark:from-indigo-900 dark:to-indigo-800">
										<span class="text-xs text-indigo-700 dark:text-indigo-300">
											Watch
										</span>
									</div>
								</div>
							)
						}

						{
							step.id === 'development' && (
								<div class="space-y-3">
									<div class="rounded bg-gray-100 p-2 dark:bg-gray-700">
										<div class="font-mono text-xs text-green-600 dark:text-green-400">
											Frontend
										</div>
										<div class="font-mono text-xs text-gray-600 dark:text-gray-400">
											React, Next.js, Astro
										</div>
									</div>
									<div class="rounded bg-gray-100 p-2 dark:bg-gray-700">
										<div class="font-mono text-xs text-blue-600 dark:text-blue-400">
											Backend
										</div>
										<div class="font-mono text-xs text-gray-600 dark:text-gray-400">
											Node.js, APIs
										</div>
									</div>
									<div class="rounded bg-gray-100 p-2 dark:bg-gray-700">
										<div class="font-mono text-xs text-purple-600 dark:text-purple-400">
											Database
										</div>
										<div class="font-mono text-xs text-gray-600 dark:text-gray-400">
											PostgreSQL, MongoDB
										</div>
									</div>
								</div>
							)
						}

						{
							step.id === 'testing' && (
								<div class="grid grid-cols-3 gap-2">
									{[...Array(9)].map((_, i) => (
										<div
											class={`aspect-square rounded ${i < 7 ? 'bg-green-200 dark:bg-green-800' : i < 8 ? 'bg-yellow-200 dark:bg-yellow-800' : 'bg-red-200 dark:bg-red-800'} flex items-center justify-center`}
										>
											<div
												class={`h-2 w-2 rounded-full ${i < 7 ? 'bg-green-500' : i < 8 ? 'bg-yellow-500' : 'bg-red-500'}`}
											/>
										</div>
									))}
								</div>
							)
						}

						{
							step.id === 'deployment' && (
								<div class="flex items-center justify-center">
									<div class="relative">
										<div class="flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-green-400 to-blue-500">
											<svg
												class="h-8 w-8 text-white"
												fill="currentColor"
												viewBox="0 0 20 20"
											>
												<path
													fill-rule="evenodd"
													d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z"
													clip-rule="evenodd"
												/>
											</svg>
										</div>
										<div class="absolute -inset-2 animate-pulse rounded-full bg-gradient-to-br from-green-400 to-blue-500 opacity-30" />
									</div>
								</div>
							)
						}

						{
							step.id === 'support' && (
								<div class="space-y-3 text-center">
									<div class="flex justify-center space-x-1">
										{[...Array(5)].map((_, i) => (
											<div
												class={`h-8 w-2 rounded-full ${i < 4 ? 'bg-gradient-to-t from-blue-500 to-purple-500' : 'bg-gray-300 dark:bg-gray-600'}`}
											/>
										))}
									</div>
									<div class="text-xs text-gray-600 dark:text-gray-400">
										24/7 Monitoring
									</div>
								</div>
							)
						}
					</div>

					<!-- Gradient overlay au hover -->
					<div
						class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/0 via-purple-500/0 to-pink-500/0 transition-all duration-300 group-hover:from-blue-500/5 group-hover:via-purple-500/5 group-hover:to-pink-500/5"
					>
					</div>
				</div>

				<!-- Glow effect */
				<div class="absolute -inset-1 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 rounded-2xl opacity-0 group-hover:opacity-20 blur-lg transition-opacity duration-300"></div>
			</div>
		</div>
	</div>
</div>

<style>
/* Animation d'apparition progressive */
.workflow-step-container.animate-in {
	opacity: 1;
	transform: translateY(0);
}

/* Hover effects */
.workflow-step-container:hover .group {
	transform: translateY(-2px);
}

/* Responsive adjustments */
@media (max-width: 1024px) {
	.workflow-step-container .lg\\:w-96 {
		max-width: 100%;
	}
}
</style>

<script>
// Animation au scroll avec Intersection Observer
document.addEventListener('DOMContentLoaded', () => {
	const steps = document.querySelectorAll('.workflow-step-container')
	
	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				// Délai basé sur l'index pour un effet de cascade
				const index = parseInt(entry.target.getAttribute('data-step-index') || '0')
				const delay = index * 200
				
				setTimeout(() => {
					entry.target.classList.add('animate-in')
				}, delay)
				
				observer.unobserve(entry.target)
			}
		})
	}, {
		threshold: 0.2,
		rootMargin: '0px 0px -100px 0px'
	})
	
	steps.forEach((step) => {
		observer.observe(step)
	})
})
</script>
			</div>
		</div>
	</div>
</div>
-->
			</div>
		</div>
	</div>
</div>
