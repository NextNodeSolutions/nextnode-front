---
import { t } from '@/lib/i18n-server'

// Questions FAQ Ã  partir des traductions
const faqQuestions = [
	{
		id: 'performance',
		question: t('howWeWork.faq.questions.0.question'),
		answer: t('howWeWork.faq.questions.0.answer'),
		icon: 'âš¡',
		category: 'performance',
	},
	{
		id: 'scalability',
		question: t('howWeWork.faq.questions.1.question'),
		answer: t('howWeWork.faq.questions.1.answer'),
		icon: 'ðŸ“ˆ',
		category: 'architecture',
	},
	{
		id: 'security',
		question: t('howWeWork.faq.questions.2.question'),
		answer: t('howWeWork.faq.questions.2.answer'),
		icon: 'ðŸ”’',
		category: 'security',
	},
	{
		id: 'integration',
		question: t('howWeWork.faq.questions.3.question'),
		answer: t('howWeWork.faq.questions.3.answer'),
		icon: 'ðŸ”—',
		category: 'integration',
	},
	{
		id: 'quality',
		question: t('howWeWork.faq.questions.4.question'),
		answer: t('howWeWork.faq.questions.4.answer'),
		icon: 'âœ…',
		category: 'quality',
	},
	{
		id: 'seo',
		question: t('howWeWork.faq.questions.5.question'),
		answer: t('howWeWork.faq.questions.5.answer'),
		icon: 'ðŸŽ¯',
		category: 'seo',
	},
]

// CatÃ©gories pour le filtrage
const categories = [
	{ id: 'all', name: t('faqCategories.all'), icon: 'ðŸ“‹' },
	{ id: 'performance', name: t('faqCategories.performance'), icon: 'âš¡' },
	{ id: 'architecture', name: t('faqCategories.architecture'), icon: 'ðŸ“ˆ' },
	{ id: 'security', name: t('faqCategories.security'), icon: 'ðŸ”’' },
	{ id: 'integration', name: t('faqCategories.integration'), icon: 'ðŸ”—' },
	{ id: 'quality', name: t('faqCategories.quality'), icon: 'âœ…' },
	{ id: 'seo', name: t('faqCategories.seo'), icon: 'ðŸŽ¯' },
]
---

<div class="technical-faq">
	<!-- Filtres par catÃ©gorie -->
	<div class="mb-12 flex flex-wrap justify-center gap-3">
		{
			categories.map((category, index) => (
				<button
					class={`faq-filter rounded-full border border-gray-200 px-4 py-2 text-sm font-medium transition-all duration-300 hover:scale-105 hover:border-blue-300 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:border-gray-700 dark:hover:border-blue-600 ${index === 0 ? 'active border-blue-500 bg-blue-500 text-white' : 'bg-white text-gray-700 dark:bg-gray-800 dark:text-gray-300'}`}
					data-category={category.id}
				>
					<span class="mr-2">{category.icon}</span>
					{category.name}
				</button>
			))
		}
	</div>

	<!-- Liste des questions FAQ -->
	<div class="space-y-4">
		{
			faqQuestions.map((faq, index) => (
				<div
					class={`faq-item translate-y-4 overflow-hidden rounded-xl border border-gray-200 bg-white opacity-0 shadow-sm transition-all duration-300 hover:shadow-md dark:border-gray-700 dark:bg-gray-800`}
					data-category={faq.category}
					style={`animation-delay: ${index * 100}ms`}
				>
					{/* Question (header cliquable) */}
					<button
						class="faq-header flex w-full items-center justify-between px-6 py-5 text-left transition-colors duration-200 hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 focus:outline-none focus:ring-inset dark:hover:bg-gray-700/50"
						data-faq={faq.id}
						aria-expanded="false"
					>
						<div class="flex items-start gap-4">
							{/* IcÃ´ne de catÃ©gorie */}
							<div class="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 text-lg dark:from-blue-900/30 dark:to-purple-900/30">
								{faq.icon}
							</div>

							<div class="flex-1">
								{/* Badge de catÃ©gorie */}
								<div class="mb-2 inline-flex items-center rounded-full bg-blue-100 px-2 py-1 text-xs font-medium text-blue-800 dark:bg-blue-900/30 dark:text-blue-300">
									{faq.category}
								</div>

								{/* Question */}
								<h3 class="text-lg leading-tight font-semibold text-gray-900 dark:text-white">
									{faq.question}
								</h3>
							</div>
						</div>

						{/* IcÃ´ne d'expansion */}
						<div class="ml-4 flex-shrink-0">
							<svg
								class="faq-chevron h-5 w-5 transform text-gray-500 transition-transform duration-200 dark:text-gray-400"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M19 9l-7 7-7-7"
								/>
							</svg>
						</div>
					</button>

					{/* RÃ©ponse (contenu collapsible) */}
					<div
						class="faq-content max-h-0 overflow-hidden transition-all duration-300 ease-in-out"
						data-faq-content={faq.id}
					>
						<div class="px-6 pb-6">
							<div class="pl-14">
								{' '}
								{/* Offset pour aligner avec le contenu de la question */}
								<div class="prose prose-sm max-w-none leading-relaxed text-gray-600 dark:text-gray-300">
									<p>{faq.answer}</p>
								</div>
								{/* Tags techniques extraits de la rÃ©ponse */}
								<div class="mt-4 flex flex-wrap gap-2">
									{faq.id === 'performance' && (
										<>
											<span class="inline-flex items-center rounded bg-green-100 px-2 py-1 text-xs font-medium text-green-800 dark:bg-green-900/30 dark:text-green-300">
												Core Web Vitals
											</span>
											<span class="inline-flex items-center rounded bg-blue-100 px-2 py-1 text-xs font-medium text-blue-800 dark:bg-blue-900/30 dark:text-blue-300">
												Lighthouse
											</span>
											<span class="inline-flex items-center rounded bg-purple-100 px-2 py-1 text-xs font-medium text-purple-800 dark:bg-purple-900/30 dark:text-purple-300">
												CDN
											</span>
										</>
									)}
									{faq.id === 'scalability' && (
										<>
											<span class="inline-flex items-center rounded bg-indigo-100 px-2 py-1 text-xs font-medium text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300">
												Microservices
											</span>
											<span class="inline-flex items-center rounded bg-green-100 px-2 py-1 text-xs font-medium text-green-800 dark:bg-green-900/30 dark:text-green-300">
												Serverless
											</span>
										</>
									)}
									{faq.id === 'security' && (
										<>
											<span class="inline-flex items-center rounded bg-red-100 px-2 py-1 text-xs font-medium text-red-800 dark:bg-red-900/30 dark:text-red-300">
												OWASP
											</span>
											<span class="inline-flex items-center rounded bg-yellow-100 px-2 py-1 text-xs font-medium text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300">
												GDPR
											</span>
										</>
									)}
									{faq.id === 'integration' && (
										<>
											<span class="inline-flex items-center rounded bg-teal-100 px-2 py-1 text-xs font-medium text-teal-800 dark:bg-teal-900/30 dark:text-teal-300">
												APIs
											</span>
											<span class="inline-flex items-center rounded bg-cyan-100 px-2 py-1 text-xs font-medium text-cyan-800 dark:bg-cyan-900/30 dark:text-cyan-300">
												CRM
											</span>
										</>
									)}
									{faq.id === 'quality' && (
										<>
											<span class="inline-flex items-center rounded bg-emerald-100 px-2 py-1 text-xs font-medium text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300">
												TypeScript
											</span>
											<span class="inline-flex items-center rounded bg-violet-100 px-2 py-1 text-xs font-medium text-violet-800 dark:bg-violet-900/30 dark:text-violet-300">
												CI/CD
											</span>
										</>
									)}
									{faq.id === 'seo' && (
										<>
											<span class="inline-flex items-center rounded bg-orange-100 px-2 py-1 text-xs font-medium text-orange-800 dark:bg-orange-900/30 dark:text-orange-300">
												Schema.org
											</span>
											<span class="inline-flex items-center rounded bg-pink-100 px-2 py-1 text-xs font-medium text-pink-800 dark:bg-pink-900/30 dark:text-pink-300">
												Mobile-First
											</span>
										</>
									)}
								</div>
							</div>
						</div>
					</div>
				</div>
			))
		}
	</div>

	<!-- Call-to-action en bas -->
	<div
		class="mt-12 rounded-2xl border border-blue-200 bg-gradient-to-r from-blue-50 to-purple-50 p-8 text-center dark:border-blue-800 dark:from-blue-900/20 dark:to-purple-900/20"
	>
		<div class="mb-4 text-4xl">ðŸ¤”</div>
		<h3 class="mb-2 text-xl font-semibold text-gray-900 dark:text-white">
			Vous avez d'autres questions techniques ?
		</h3>
		<p class="mx-auto mb-6 max-w-2xl text-gray-600 dark:text-gray-300">
			N'hÃ©sitez pas Ã  nous contacter pour discuter de vos dÃ©fis techniques
			spÃ©cifiques. Nous serions ravis de vous expliquer notre approche en
			dÃ©tail.
		</p>
		<a
			href="/contact"
			class="inline-flex items-center rounded-lg bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-3 font-semibold text-white shadow-lg transition-all duration-300 hover:scale-105 hover:from-blue-700 hover:to-purple-700 hover:shadow-xl"
		>
			<svg
				class="mr-2 h-5 w-5"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
				></path>
			</svg>
			Discuter de votre projet
		</a>
	</div>
</div>

<style>
	/* Animation d'entrÃ©e pour les items FAQ */
	.faq-item {
		animation: fadeInUp 0.6s ease-out forwards;
	}

	@keyframes fadeInUp {
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* Rotation de l'icÃ´ne chevron */
	.faq-header[aria-expanded='true'] .faq-chevron {
		transform: rotate(180deg);
	}

	/* Styles pour les filtres actifs */
	.faq-filter.active {
		background: linear-gradient(135deg, #3b82f6, #8b5cf6);
		color: white;
		border-color: #3b82f6;
		box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
	}

	.faq-filter:not(.active):hover {
		transform: scale(1.05);
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
	}

	/* Animation smooth pour le contenu */
	.faq-content {
		transition:
			max-height 0.3s ease-in-out,
			padding 0.3s ease-in-out;
	}

	/* Effet de brillance au hover */
	.faq-item:hover {
		box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
		transform: translateY(-2px);
	}

	/* Responsive */
	@media (max-width: 768px) {
		.faq-filter {
			font-size: 12px;
			padding: 0.5rem 0.75rem;
		}

		.faq-header {
			padding: 1rem;
		}

		.faq-content > div {
			padding-left: 1rem;
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const filterButtons = document.querySelectorAll('.faq-filter')
		const faqItems = document.querySelectorAll('.faq-item')
		const faqHeaders = document.querySelectorAll('.faq-header')

		// Fonction pour filtrer les FAQ par catÃ©gorie
		function filterFAQs(category: string) {
			faqItems.forEach((item, index) => {
				const itemCategory = item.getAttribute('data-category')
				const shouldShow =
					category === 'all' || itemCategory === category

				if (shouldShow) {
					// RÃ©initialiser l'animation
					;(item as HTMLElement).style.animationDelay =
						`${index * 100}ms`
					item.classList.remove(
						'opacity-0',
						'translate-y-4',
						'hidden',
					)
					item.classList.add('opacity-100', 'translate-y-0')
				} else {
					item.classList.add('hidden')
				}
			})
		}

		// Fonction pour basculer l'Ã©tat d'une FAQ
		function toggleFAQ(faqId: string) {
			const header = document.querySelector(
				`[data-faq="${faqId}"]`,
			) as HTMLElement
			const content = document.querySelector(
				`[data-faq-content="${faqId}"]`,
			) as HTMLElement

			if (!header || !content) return

			const isExpanded = header.getAttribute('aria-expanded') === 'true'

			// Fermer toutes les autres FAQs (comportement accordÃ©on)
			faqHeaders.forEach(otherHeader => {
				if (otherHeader !== header) {
					const otherId = otherHeader.getAttribute('data-faq')
					const otherContent = document.querySelector(
						`[data-faq-content="${otherId}"]`,
					) as HTMLElement

					if (otherHeader && otherContent) {
						otherHeader.setAttribute('aria-expanded', 'false')
						otherContent.style.maxHeight = '0px'
					}
				}
			})

			// Basculer l'Ã©tat de la FAQ courante
			if (isExpanded) {
				header.setAttribute('aria-expanded', 'false')
				content.style.maxHeight = '0px'
			} else {
				header.setAttribute('aria-expanded', 'true')
				content.style.maxHeight = content.scrollHeight + 'px'

				// Scroll smooth vers la question
				setTimeout(() => {
					header.scrollIntoView({
						behavior: 'smooth',
						block: 'nearest',
					})
				}, 150)
			}
		}

		// Gestionnaires d'Ã©vÃ©nements pour les filtres
		filterButtons.forEach(button => {
			button.addEventListener('click', () => {
				// Retirer l'Ã©tat actif de tous les boutons
				filterButtons.forEach(btn => {
					btn.classList.remove(
						'active',
						'bg-blue-500',
						'text-white',
						'border-blue-500',
					)
					btn.classList.add(
						'bg-white',
						'dark:bg-gray-800',
						'text-gray-700',
						'dark:text-gray-300',
					)
				})

				// Activer le bouton cliquÃ©
				button.classList.add(
					'active',
					'bg-blue-500',
					'text-white',
					'border-blue-500',
				)
				button.classList.remove(
					'bg-white',
					'dark:bg-gray-800',
					'text-gray-700',
					'dark:text-gray-300',
				)

				// Filtrer les FAQs
				const category = button.getAttribute('data-category')
				if (category) {
					filterFAQs(category)
				}
			})
		})

		// Gestionnaires d'Ã©vÃ©nements pour les headers FAQ
		faqHeaders.forEach(header => {
			header.addEventListener('click', () => {
				const faqId = header.getAttribute('data-faq')
				if (faqId) {
					toggleFAQ(faqId)
				}
			})
		})

		// Animation initiale
		setTimeout(() => {
			faqItems.forEach(item => {
				item.classList.add('opacity-100', 'translate-y-0')
				item.classList.remove('opacity-0', 'translate-y-4')
			})
		}, 200)

		// Gestion du redimensionnement pour les contenus ouverts
		window.addEventListener('resize', () => {
			faqHeaders.forEach(header => {
				if (header.getAttribute('aria-expanded') === 'true') {
					const faqId = header.getAttribute('data-faq')
					const content = document.querySelector(
						`[data-faq-content="${faqId}"]`,
					) as HTMLElement
					if (content) {
						content.style.maxHeight = content.scrollHeight + 'px'
					}
				}
			})
		})
	})
</script>
