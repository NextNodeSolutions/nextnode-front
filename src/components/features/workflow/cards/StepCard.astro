---
// Use new i18n system from middleware
const { locale, t } = Astro.locals
import { getStepDesign } from '../step-designs'
import { VARIANT_FEATURES, getVariantClasses } from './step-card-variants'
import PatternBackground from '@/components/ui/patterns/pattern-background.astro'
import type { EnglishDict } from '@/i18n/types'
import type { StepCardVariant } from './step-card-variants'

export interface Props {
	stepKey: string
	index: number
	variant?: StepCardVariant
}

import { cn } from '@/lib/core/utils'

const { stepKey, index, variant = 'mobile' } = Astro.props

// Use centralized variant configuration
const showHeader = VARIANT_FEATURES.showHeader(variant)
const showDescription = VARIANT_FEATURES.showDescription(variant)
const showStepLabel = VARIANT_FEATURES.showStepLabel(variant)

// Type alias for step data
type StepData =
	EnglishDict['howWeWork']['steps'][keyof EnglishDict['howWeWork']['steps']]

// Get step data using the new t() function
const step = t(`howWeWork.steps.${stepKey}`) as StepData
const number = step.number
const title = step.title
const description = step.description

const design = getStepDesign(index)
---

<div
	class={cn(
		'group relative cursor-pointer transition-smooth hover-lift-sm',
		getVariantClasses(variant, 'container'),
	)}
	data-step-card
	data-step-index={index}
>
	<div
		class={cn(
			'absolute -inset-1 rounded-2xl bg-gradient-to-r opacity-0 blur transition-all duration-500 group-hover:opacity-20',
			design.gradient,
		)}
	>
	</div>
	<div
		class={cn(
			'card-base relative overflow-hidden border border-gray-100 dark:border-gray-800',
			design.glow,
		)}
	>
		{
			showHeader && (
				<div
					class={cn(
						design.gradient,
						'relative overflow-hidden bg-gradient-to-br',
						getVariantClasses(variant, 'header'),
					)}
				>
					<PatternBackground
						pattern={design.pattern}
						opacity={0.1}
						uniqueId={`${stepKey}-${index}`}
						className="absolute inset-0 transition-opacity duration-500 group-hover:opacity-20"
					/>

					<div
						class={cn(
							'absolute transform transition-transform duration-500 group-hover:rotate-12',
							getVariantClasses(variant, 'position'),
						)}
					>
						<div
							class={cn(
								'flex items-center justify-center rounded-2xl bg-white/20 shadow-lg ring-1 ring-white/30 backdrop-blur-sm',
								getVariantClasses(variant, 'number'),
							)}
						>
							<span
								class={cn(
									'font-black text-white drop-shadow-sm',
									getVariantClasses(variant, 'numberText'),
								)}
							>
								{number}
							</span>
						</div>
					</div>

					<div
						class={cn(
							'absolute transform transition-all duration-500 group-hover:scale-110 group-hover:-rotate-6',
							getVariantClasses(variant, 'iconPosition'),
						)}
					>
						<div
							class={cn(
								'flex items-center justify-center rounded-2xl border border-white/20 bg-white/10 shadow-lg backdrop-blur-md',
								getVariantClasses(variant, 'icon'),
							)}
						>
							<span
								class={cn(
									'drop-shadow-lg filter',
									getVariantClasses(variant, 'iconText'),
								)}
							>
								{design.icon}
							</span>
						</div>
					</div>

					<div class="absolute top-2 left-2 h-4 w-4 animate-pulse rounded-full bg-white/20 blur-sm" />
					<div
						class="absolute right-2 bottom-2 h-3 w-3 animate-pulse rounded-full bg-white/30 blur-sm"
						style="animation-delay: 1s;"
					/>
				</div>
			)
		}

		<div class={cn(getVariantClasses(variant, 'content'))}>
			<div class="space-y-2">
				<h3
					class={cn(
						'leading-tight font-bold text-gray-900 transition-all duration-300 group-hover:scale-105 dark:text-white',
						getVariantClasses(variant, 'title'),
					)}
				>
					{title}
				</h3>

				<div
					class={cn(
						'flex items-center space-x-1',
						variant === 'mini' ? 'py-1' : 'py-2',
					)}
				>
					{
						Array.from({ length: 6 }, (_, i) => (
							<div
								class={cn(
									'flex-1 rounded-full transition-all duration-700',
									variant === 'mini' ? 'h-0.5' : 'h-1',
									i <= index
										? cn(
												'bg-gradient-to-r shadow-sm',
												design.gradient,
											)
										: 'bg-gray-200 dark:bg-gray-700',
								)}
								style={`transition-delay: ${i * 50}ms`}
							/>
						))
					}
				</div>
			</div>

			{
				showDescription && (
					<p
						class={cn(
							'leading-relaxed text-gray-600 transition-colors duration-300 group-hover:text-gray-800 dark:text-gray-300 dark:group-hover:text-gray-200',
							getVariantClasses(variant, 'description'),
						)}
					>
						{description}
					</p>
				)
			}

			<div class="pt-2">
				{
					showStepLabel && (
						<div class="mb-1">
							<span class="text-xs font-medium tracking-wider whitespace-nowrap text-gray-500 uppercase dark:text-gray-400">
								{t('common.stepCard.step')}
								{number}
							</span>
						</div>
					)
				}

				<div class="flex items-center">
					<span
						class="text-xs font-medium text-blue-600 dark:text-blue-400"
					>
						{t('common.stepCard.clickToSeeMore')}
					</span>
					<span
						class="ml-1 text-xs font-medium text-blue-600 opacity-0 transition-all duration-300 group-hover:translate-x-1 group-hover:opacity-100 dark:text-blue-400"
					>
						>
					</span>
				</div>
			</div>
		</div>
	</div>
</div>

<style></style>
