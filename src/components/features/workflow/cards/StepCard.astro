---
import {
	getNestedValue,
	translations,
	getCurrentLanguage,
	t,
} from '@/lib/i18n/i18n-server'
import { getStepDesign } from '../step-designs'
import type { EnglishDict } from '@/i18n/types'

export interface Props {
	stepKey: string
	index: number
	variant?: 'mobile' | 'compact' | 'mini'
}

import { cn } from '@/lib/core/utils'

const { stepKey, index, variant = 'mobile' } = Astro.props

// Consolidated variant constants - much cleaner than 9 separate CVAs
const VARIANTS = {
	container: {
		mobile: 'duration-700 hover:scale-[1.02]',
		compact: 'duration-300 hover:scale-[1.005]',
		mini: 'duration-200 hover:scale-[1.002]',
	},
	header: {
		mobile: 'h-32',
		compact: 'h-16',
		mini: 'h-12',
	},
	content: {
		mobile: 'space-y-4 p-6',
		compact: 'space-y-1 p-3',
		mini: 'p-2',
	},
	title: {
		mobile: 'text-xl',
		compact: 'text-base',
		mini: 'text-sm',
	},
	description: {
		mobile: 'line-clamp-5 text-sm',
		compact: 'line-clamp-3 text-xs',
		mini: 'hidden',
	},
	icon: {
		mobile: 'h-16 w-16',
		compact: 'h-8 w-8',
		mini: 'h-6 w-6',
	},
	number: {
		mobile: 'h-12 w-12',
		compact: 'h-6 w-6',
		mini: 'h-5 w-5',
	},
	iconText: {
		mobile: 'text-3xl',
		compact: 'text-lg',
		mini: 'text-base',
	},
	numberText: {
		mobile: 'text-2xl',
		compact: 'text-sm',
		mini: 'text-xs',
	},
	position: {
		mobile: 'top-4 right-4',
		compact: 'top-1 right-1',
		mini: 'top-1 right-1',
	},
	iconPosition: {
		mobile: 'bottom-4 left-4',
		compact: 'bottom-1 left-1',
		mini: 'bottom-1 left-1',
	},
} as const

const showHeader = variant === 'mobile' // Show header in mobile mode only
const showDescription = variant !== 'mini' // Hide description in mini mode
const showStepLabel = variant !== 'mini' // Hide step label in mini mode

// Type alias for step data
type StepData =
	EnglishDict['howWeWork']['steps'][keyof EnglishDict['howWeWork']['steps']]

// Récupérer les données de l'étape depuis les traductions
const step = getNestedValue(
	translations[getCurrentLanguage()],
	`howWeWork.steps.${stepKey}`,
) as StepData
const number = step.number
const title = step.title
const description = step.description

// Récupérer le design correspondant à l'index
const design = getStepDesign(index)
---

<div
	class={cn(
		'group relative transform transition-all cursor-pointer',
		VARIANTS.container[variant],
	)}
	data-step-card
	data-step-index={index}
>
	{/* Glow effect */}
	<div
		class="{design.gradient} absolute -inset-1 rounded-2xl bg-gradient-to-r opacity-0 blur transition-all duration-500 group-hover:opacity-20"
	>
	</div>

	{/* Main card */}
	<div
		class="{design.glow} relative overflow-hidden rounded-2xl border border-gray-100 bg-white shadow-xl transition-all duration-500 group-hover:shadow-2xl dark:border-gray-800 dark:bg-gray-900"
	>
		{/* Header section - hidden in mini variant */}
		{
			showHeader && (
				<div
					class={cn(
						design.gradient,
						'relative overflow-hidden bg-gradient-to-br',
						VARIANTS.header[variant],
					)}
				>
					{/* Animated background pattern */}
					<div class="absolute inset-0 opacity-10 transition-opacity duration-500 group-hover:opacity-20">
						{design.pattern === 'dots' && (
							<svg class="h-full w-full" viewBox="0 0 100 100">
								<defs>
									<pattern
										id={`dots-${stepKey}`}
										x="0"
										y="0"
										width="10"
										height="10"
										patternUnits="userSpaceOnUse"
									>
										<circle
											cx="5"
											cy="5"
											r="1"
											fill="currentColor"
										/>
									</pattern>
								</defs>
								<rect
									width="100%"
									height="100%"
									fill={`url(#dots-${stepKey})`}
								/>
							</svg>
						)}

						{design.pattern === 'grid' && (
							<svg class="h-full w-full" viewBox="0 0 100 100">
								<defs>
									<pattern
										id={`grid-${stepKey}`}
										x="0"
										y="0"
										width="10"
										height="10"
										patternUnits="userSpaceOnUse"
									>
										<path
											d="M 10 0 L 0 0 0 10"
											fill="none"
											stroke="currentColor"
											stroke-width="0.5"
										/>
									</pattern>
								</defs>
								<rect
									width="100%"
									height="100%"
									fill={`url(#grid-${stepKey})`}
									class="py-6"
								/>
							</svg>
						)}

						{design.pattern === 'waves' && (
							<svg class="h-full w-full" viewBox="0 0 100 100">
								<path
									d="M0,50 Q25,30 50,50 T100,50 L100,100 L0,100 Z"
									fill="currentColor"
									opacity="0.1"
								/>
								<path
									d="M0,60 Q25,40 50,60 T100,60 L100,100 L0,100 Z"
									fill="currentColor"
									opacity="0.05"
								/>
							</svg>
						)}
					</div>

					{/* Floating elements */}
					<div
						class={cn(
							'absolute transform transition-transform duration-500 group-hover:rotate-12',
							VARIANTS.position[variant],
						)}
					>
						<div
							class={cn(
								'flex items-center justify-center rounded-2xl bg-white/20 shadow-lg ring-1 ring-white/30 backdrop-blur-sm',
								VARIANTS.number[variant],
							)}
						>
							<span
								class={cn(
									'font-black text-white drop-shadow-sm',
									VARIANTS.numberText[variant],
								)}
							>
								{number}
							</span>
						</div>
					</div>

					{/* Icon with animation */}
					<div
						class={cn(
							'absolute transform transition-all duration-500 group-hover:scale-110 group-hover:-rotate-6',
							VARIANTS.iconPosition[variant],
						)}
					>
						<div
							class={cn(
								'flex items-center justify-center rounded-2xl border border-white/20 bg-white/10 shadow-lg backdrop-blur-md',
								VARIANTS.icon[variant],
							)}
						>
							<span
								class={cn(
									'drop-shadow-lg filter',
									VARIANTS.iconText[variant],
								)}
							>
								{design.icon}
							</span>
						</div>
					</div>

					{/* Decorative orbs */}
					<div class="absolute top-2 left-2 h-4 w-4 animate-pulse rounded-full bg-white/20 blur-sm" />
					<div
						class="absolute right-2 bottom-2 h-3 w-3 animate-pulse rounded-full bg-white/30 blur-sm"
						style="animation-delay: 1s;"
					/>
				</div>
			)
		}

		{/* Content section */}
		<div class={cn(VARIANTS.content[variant])}>
			{/* Title */}
			<div class="space-y-2">
				<h3
					class={cn(
						'leading-tight font-bold text-gray-900 transition-all duration-300 group-hover:scale-105 dark:text-white',
						VARIANTS.title[variant],
					)}
				>
					{title}
				</h3>

				{/* Progress indicator */}
				<div
					class={cn(
						'flex items-center space-x-1',
						variant === 'mini' ? 'py-1' : 'py-2',
					)}
				>
					{
						Array.from({ length: 6 }, (_, i) => (
							<div
								class={`${variant === 'mini' ? 'h-0.5' : 'h-1'} flex-1 rounded-full transition-all duration-700 ${
									i <= index
										? `bg-gradient-to-r ${design.gradient} shadow-sm`
										: 'bg-gray-200 dark:bg-gray-700'
								}`}
								style={`transition-delay: ${i * 50}ms`}
							/>
						))
					}
				</div>
			</div>

			{/* Description */}
			{
				showDescription && (
					<p
						class={cn(
							'leading-relaxed text-gray-600 transition-colors duration-300 group-hover:text-gray-800 dark:text-gray-300 dark:group-hover:text-gray-200',
							VARIANTS.description[variant],
						)}
					>
						{description}
					</p>
				)
			}

			{/* Bottom accent */}
			<div class="pt-2">
				{/* Étape X */}
				{
					showStepLabel && (
						<div class="mb-1">
							<span class="text-xs font-medium tracking-wider whitespace-nowrap text-gray-500 uppercase dark:text-gray-400">
								{t('stepCard.step')}
								{number}
							</span>
						</div>
					)
				}

				{/* Click to see more - aligné à gauche avec couleur */}
				<div class="flex items-center">
					<span
						class="text-xs font-medium text-blue-600 dark:text-blue-400"
					>
						{t('stepCard.clickToSeeMore')}
					</span>
					<span
						class="ml-1 text-xs font-medium text-blue-600 opacity-0 transition-all duration-300 group-hover:translate-x-1 group-hover:opacity-100 dark:text-blue-400"
					>
						>
					</span>
				</div>
			</div>
		</div>
	</div>
</div>

<style>
	.line-clamp-2 {
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.line-clamp-3 {
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	/* Custom animations */
	@keyframes float {
		0%,
		100% {
			transform: translateY(0px);
		}
		50% {
			transform: translateY(-10px);
		}
	}

	.group:hover .float {
		animation: float 3s ease-in-out infinite;
	}

	/* Enhanced hover effects */
	.group:hover {
		transform: translateY(-4px) scale(1.02);
	}

	/* Smooth transitions */
	* {
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
	}
</style>
