---
// Use new i18n system from middleware
const { t } = Astro.locals
import { TECH_CATEGORIES, getTechColorClasses } from '@/data/tech-stack'
import TechCard from '@/components/ui/cards/TechCard.astro'
import { cn } from '@/lib/core/utils'

// Generate categories with translated titles and descriptions
const categories = TECH_CATEGORIES.map(category => ({
	...category,
	title: t(category.titleKey as any),
	description: t(category.descriptionKey as any),
}))
---

<div class="tech-stack-grid">
	<!-- Category selector -->
	<div class="mb-12 flex flex-wrap justify-center gap-4">
		{
			categories.map((category, index) => {
				const colors = getTechColorClasses(category.color)
				return (
					<button
						class={cn(
							'category-tab rounded-full px-6 py-3 font-semibold transition-all duration-300 hover:scale-105 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none',
							colors.border,
							colors.bgLight,
							colors.text,
							index === 0 && 'active',
						)}
						data-category={category.id}
					>
						<span class="mr-2 text-lg">{category.icon}</span>
						{category.title}
					</button>
				)
			})
		}
	</div>

	<!-- Category content -->
	<div class="relative min-h-[600px]">
		{
			categories.map((category, categoryIndex) => {
				const colors = getTechColorClasses(category.color)
				return (
					<div
						id={`category-${category.id}`}
						class={cn(
							'category-content absolute inset-0 transition-all duration-500',
							categoryIndex === 0
								? 'translate-y-0 opacity-100'
								: 'pointer-events-none translate-y-8 opacity-0',
						)}
					>
						{/* Category header */}
						<div class="mb-12 text-center">
							<div
								class={cn(
									'mb-4 inline-flex h-16 w-16 items-center justify-center rounded-2xl bg-gradient-to-br text-2xl text-white shadow-lg',
									colors.bg,
								)}
							>
								{category.icon}
							</div>
							<h3 class="mb-2 text-2xl font-bold text-gray-900 dark:text-white">
								{category.title}
							</h3>
							<p class="mx-auto max-w-2xl text-lg text-gray-600 dark:text-gray-300">
								{category.description}
							</p>
						</div>

						{/* Technology grid */}
						<div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:gap-8">
							{category.technologies.map((tech, techIndex) => (
								<TechCard
									technology={tech}
									category={category}
									animationIndex={techIndex}
								/>
							))}
						</div>

						{/* General category stats */}
						<div
							class={cn(
								'mt-12 rounded-2xl border p-6',
								colors.bgLight,
								colors.border,
							)}
						>
							<div class="grid grid-cols-1 gap-6 text-center md:grid-cols-3">
								<div>
									<div
										class={cn(
											'mb-1 text-3xl font-bold',
											colors.text,
										)}
									>
										{category.technologies.length}
									</div>
									<div class="text-sm text-gray-600 dark:text-gray-400">
										{t(
											'howWeWork.techStats.masteriedTechnologies',
										)}
									</div>
								</div>
								<div>
									<div
										class={cn(
											'mb-1 text-3xl font-bold',
											colors.text,
										)}
									>
										{Math.round(
											category.technologies.reduce(
												(acc, tech) => acc + tech.level,
												0,
											) / category.technologies.length,
										)}
										%
									</div>
									<div class="text-sm text-gray-600 dark:text-gray-400">
										{t('howWeWork.techStats.averageLevel')}
									</div>
								</div>
								<div>
									<div
										class={cn(
											'mb-1 text-3xl font-bold',
											colors.text,
										)}
									>
										{
											category.technologies.filter(
												tech => tech.level >= 90,
											).length
										}
									</div>
									<div class="text-sm text-gray-600 dark:text-gray-400">
										{t(
											'howWeWork.techStats.expertTechnologies',
										)}
									</div>
								</div>
							</div>
						</div>
					</div>
				)
			})
		}
	</div>
</div>

<style>
	/* Styles for active tabs */
	.category-tab.active {
		transform: scale(1.05);
		box-shadow:
			0 25px 50px -12px rgba(0, 0, 0, 0.25),
			0 10px 10px -5px rgba(0, 0, 0, 0.04);
		transition: transform 0.3s ease;
	}

	/* Progress bar animations */
	.tech-progress {
		transition: width 1.5s ease-out;
	}

	/* Responsive adjustments */
	@media (max-width: 768px) {
		.category-tab {
			font-size: 14px;
			padding: 0.5rem 1rem;
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const categoryTabs = document.querySelectorAll('.category-tab')
		const categoryContents = document.querySelectorAll('.category-content')

		// Function to animate progress bars
		function animateProgressBars(container: Element) {
			const progressBars = container.querySelectorAll('.tech-progress')
			progressBars.forEach((bar, index) => {
				const progress = bar.getAttribute('data-progress')
				setTimeout(() => {
					;(bar as HTMLElement).style.width = `${progress}%`
				}, index * 200)
			})
		}

		// Function to switch category
		function switchCategory(targetId: string) {
			// Hide all categories
			categoryContents.forEach(content => {
				content.classList.remove('opacity-100', 'translate-y-0')
				content.classList.add(
					'opacity-0',
					'translate-y-8',
					'pointer-events-none',
				)
			})

			// Remove active state from all tabs
			categoryTabs.forEach(tab => {
				tab.classList.remove('active')
			})

			// Show target category with delay
			setTimeout(() => {
				const targetContent = document.getElementById(
					`category-${targetId}`,
				)
				const targetTab = document.querySelector(
					`[data-category="${targetId}"]`,
				)

				if (targetContent && targetTab) {
					targetContent.classList.remove(
						'opacity-0',
						'translate-y-8',
						'pointer-events-none',
					)
					targetContent.classList.add('opacity-100', 'translate-y-0')
					targetTab.classList.add('active')

					// Animate progress bars after short delay
					setTimeout(() => {
						animateProgressBars(targetContent)
					}, 300)
				}
			}, 200)
		}

		// Event handlers for tabs
		categoryTabs.forEach(tab => {
			tab.addEventListener('click', () => {
				const categoryId = tab.getAttribute('data-category')
				if (categoryId) {
					switchCategory(categoryId)
				}
			})
		})

		// Initial progress bar animation for first category
		const firstCategory = document.getElementById('category-frontend')
		if (firstCategory) {
			setTimeout(() => {
				animateProgressBars(firstCategory)
			}, 500)
		}

		// Intersection Observer pour animer les cards quand elles entrent dans la vue
		const observer = new IntersectionObserver(
			entries => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						const cards =
							entry.target.querySelectorAll('.tech-card')
						cards.forEach((card, index) => {
							setTimeout(() => {
								card.classList.add('animate-in')
							}, index * 100)
						})
						observer.unobserve(entry.target)
					}
				})
			},
			{
				threshold: 0.2,
			},
		)

		// Observe all categories
		categoryContents.forEach(content => {
			observer.observe(content)
		})
	})
</script>
