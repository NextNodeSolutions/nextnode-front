---
import { cn } from '@/lib/core/utils'
import { t } from '@/lib/i18n/i18n-server'
import type { FAQQuestion, FAQDifficulty } from './types'

interface Props {
	faq: FAQQuestion
	isExpanded?: boolean
	onToggle?: () => void
	highlightedQuestion?: string
	highlightedAnswer?: string
}

const {
	faq,
	isExpanded = false,
	highlightedQuestion,
	highlightedAnswer,
} = Astro.props

const getDifficultyConfig = (difficulty: FAQDifficulty) => {
	const configs = {
		beginner: {
			icon: 'ðŸŸ¢',
			label: t('howWeWork.faqDifficulty.beginner'),
			bgClass:
				'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
		},
		intermediate: {
			icon: 'ðŸŸ¡',
			label: t('howWeWork.faqDifficulty.intermediate'),
			bgClass:
				'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300',
		},
		advanced: {
			icon: 'ðŸ”´',
			label: t('howWeWork.faqDifficulty.advanced'),
			bgClass:
				'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
		},
	}
	return configs[difficulty] || configs.beginner
}

const difficultyConfig = getDifficultyConfig(faq.difficulty)
const categoryName = t(`howWeWork.faqCategories.${faq.category}`)
---

<div
	class="faq-item group overflow-hidden rounded-xl border border-gray-200 bg-white shadow-sm transition-all duration-300 hover:border-blue-200 hover:shadow-lg dark:border-gray-700 dark:bg-gray-800 dark:hover:border-blue-600"
	data-category={faq.category}
	data-difficulty={faq.difficulty}
	data-faq-id={faq.id}
>
	<!-- Question (header clickable) -->
	<button
		class="faq-header group/header flex w-full items-center justify-between px-6 py-6 text-left transition-all duration-200 hover:bg-gray-50 focus:bg-blue-50 focus:ring-2 focus:ring-blue-500 focus:outline-none focus:ring-inset dark:hover:bg-gray-700/50 dark:focus:bg-blue-900/20"
		data-faq={faq.id}
		aria-expanded={isExpanded}
		type="button"
	>
		<div class="flex min-w-0 flex-1 items-start gap-4">
			<!-- Category icon -->
			<div
				class={cn(
					'flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-xl text-xl transition-transform duration-200',
					'bg-gradient-to-br from-blue-100 to-purple-100 dark:from-blue-900/30 dark:to-purple-900/30',
					'group-hover:scale-110 group-focus-within:scale-110',
				)}
			>
				{faq.icon}
			</div>

			<div class="min-w-0 flex-1">
				<!-- Badges Row -->
				<div class="mb-3 flex flex-wrap items-center gap-2">
					<!-- Category badge -->
					<span
						class="inline-flex items-center rounded-full bg-blue-100 px-3 py-1 text-xs font-medium text-blue-800 dark:bg-blue-900/30 dark:text-blue-300"
					>
						{categoryName}
					</span>

					<!-- Difficulty badge -->
					<span
						class={cn(
							'inline-flex items-center gap-1 rounded-full px-3 py-1 text-xs font-medium',
							difficultyConfig.bgClass,
						)}
					>
						<span class="text-xs">{difficultyConfig.icon}</span>
						{difficultyConfig.label}
					</span>
				</div>

				<!-- Question -->
				<h3
					class="text-lg leading-tight font-semibold text-gray-900 transition-colors duration-200 group-hover/header:text-blue-700 dark:text-white dark:group-hover/header:text-blue-300"
				>
					{
						highlightedQuestion ? (
							<Fragment set:html={highlightedQuestion} />
						) : (
							faq.question
						)
					}
				</h3>
			</div>
		</div>

		<!-- Expansion icon -->
		<div class="ml-4 flex-shrink-0">
			<svg
				class={cn(
					'h-6 w-6 transform text-gray-400 transition-all duration-300 group-hover/header:text-blue-500',
					isExpanded ? 'rotate-180' : 'rotate-0',
				)}
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M19 9l-7 7-7-7"></path>
			</svg>
		</div>
	</button>

	<!-- Answer (collapsible content) -->
	<div
		class={cn(
			'faq-content overflow-hidden transition-all duration-500 ease-out',
			isExpanded ? 'max-h-[1000px] opacity-100' : 'max-h-0 opacity-0',
		)}
		data-content={faq.id}
	>
		<div class="border-t border-gray-100 px-6 py-6 dark:border-gray-700">
			<div
				class="prose prose-sm dark:prose-invert ml-16 max-w-none text-gray-600 dark:text-gray-300"
			>
				{
					highlightedAnswer ? (
						<div set:html={highlightedAnswer} />
					) : (
						<div set:html={faq.answer} />
					)
				}
			</div>

			<!-- Related Questions (if any) -->
			{
				faq.relatedIds && faq.relatedIds.length > 0 && (
					<div class="mt-6 ml-16 border-t border-gray-100 pt-4 dark:border-gray-700">
						<h4 class="mb-2 text-sm font-medium text-gray-900 dark:text-white">
							Related Questions:
						</h4>
						<div class="flex flex-wrap gap-2">
							{faq.relatedIds.map(relatedId => (
								<button
									class="text-xs text-blue-600 underline decoration-dotted underline-offset-2 transition-colors hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
									data-related-question={relatedId}
									type="button"
								>
									View related â†’
								</button>
							))}
						</div>
					</div>
				)
			}
		</div>
	</div>
</div>
