---
import {
	STEP_COLORS,
	DESKTOP_WORKFLOW_POSITIONS,
	generateGradientStops,
} from '../workflow-constants'
import { generateDetailedSteps } from '../workflow-utils'

import WorkflowGradients from '../visual/WorkflowGradients.astro'
import WorkflowPath from '../visual/WorkflowPath.astro'
import StepCardContainer from '../cards/StepCardContainer.astro'

export interface Props {
	variant?: 'default' | 'compact' | 'mini'
}

const { variant = 'mini' } = Astro.props

// Données des étapes avec traductions
const detailedSteps = generateDetailedSteps()
const positions = DESKTOP_WORKFLOW_POSITIONS
const gradientStops = generateGradientStops(STEP_COLORS)

// ViewBox dimensions - same as the working old version
const VIEWBOX_WIDTH = 1000
const VIEWBOX_HEIGHT = 500

// Card dimensions in viewBox units
const CARD_DIMENSIONS = {
	compact: { width: 220, height: 120 },
	mini: { width: 180, height: 100 },
}

const cardWidth = CARD_DIMENSIONS[variant].width
const cardHeight = CARD_DIMENSIONS[variant].height
---

<div class="workflow-journey relative w-full py-8 md:py-12 lg:py-16">
	<div class="container mx-auto px-4">
		<!-- SVG Background avec chemin et lignes -->
		<svg
			class="aspect-[2/1] w-full"
			viewBox="0 -50 1000 500"
			style="overflow: visible;"
			xmlns="http://www.w3.org/2000/svg"
		>
			<WorkflowGradients gradientStops={gradientStops} />
			<WorkflowPath />

			{/* Lignes de connexion, points et cards - tout dans le SVG */}
			{
				positions.map((position, index) => {
					const color = STEP_COLORS[index]
					const step = detailedSteps[index]

					if (!step || !color) {
						return null
					}

					return (
						<g>
							{/* Ligne de connexion */}
							<line
								x1={position.x}
								y1={position.y}
								x2={position.lineEndX}
								y2={position.lineEndY}
								stroke={color}
								stroke-width="3"
								opacity="0"
								class="workflow-line"
								style={`animation-delay: ${index * 150}ms`}
							/>

							{/* Point sur le chemin */}
							<circle
								cx={position.x}
								cy={position.y}
								r="6"
								fill={color}
								stroke="white"
								stroke-width="3"
								opacity="0"
								class="workflow-point"
								style={`animation-delay: ${index * 150}ms`}
							/>

							{/* Card dans le SVG - scale automatiquement avec viewBox */}
							<foreignObject
								x={position.cardX}
								y={position.cardY}
								width={cardWidth}
								height={cardHeight}
								class="svg-card"
								style={`animation-delay: ${index * 150}ms`}
							>
								<StepCardContainer
									stepKey={step.id}
									index={index}
									variant={variant}
								/>
							</foreignObject>
						</g>
					)
				})
			}
		</svg>
	</div>
</div>

<style>
	/* Styles simples et propres pour le workflow journey */
	.workflow-journey {
		user-select: none;
	}

	.step-card-group {
		opacity: 1;
	}

	/* Interactive card hover effects */
	.interactive-card {
		cursor: pointer;
	}

	/* SVG Cards - scale automatiquement avec le viewBox */
	.svg-card {
		opacity: 0;
		animation: fadeInCard 0.8s ease-out forwards;
	}

	@keyframes fadeInCard {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* Workflow lines and points animations - synchronized with cards */
	.workflow-line {
		animation: fadeInLine 0.8s ease-out forwards;
	}

	.workflow-point {
		animation: fadeInPoint 0.8s ease-out forwards;
	}

	@keyframes fadeInLine {
		from {
			opacity: 0;
			stroke-dasharray: 1000;
			stroke-dashoffset: 1000;
		}
		to {
			opacity: 1;
			stroke-dasharray: none;
			stroke-dashoffset: 0;
		}
	}

	@keyframes fadeInPoint {
		from {
			opacity: 0;
			transform: scale(0);
		}
		to {
			opacity: 1;
			transform: scale(1);
		}
	}

	/* Accessibility - respect reduced motion preference */
	@media (prefers-reduced-motion: reduce) {
		.workflow-line,
		.workflow-point {
			animation: none;
			opacity: 1;
		}
	}

	/* Responsive adjustments */
	@media (max-width: 768px) {
		.workflow-journey svg {
			height: 400px;
		}

		.expanded-content {
			width: 350px !important;
			height: 250px !important;
			x: 50 !important;
			y: 125 !important;
		}
	}
</style>
