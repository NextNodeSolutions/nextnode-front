---
import StepCard from '../cards/StepCard.astro'
import {
	calculateStepPositions,
	getWorkflowPositioning,
	type WorkflowVariant,
	type StepPosition,
} from './workflow-positioning'
import { STEP_COLORS, STEP_KEYS } from '../workflow-constants'

export interface Props {
	variant?: WorkflowVariant
}

const { variant = 'mini' } = Astro.props

// Get positioning data
const { stepCardVariant } = getWorkflowPositioning(variant)
const stepPositions = calculateStepPositions(variant)
---

<!-- Card overlay layer -->
<div class="workflow-cards-container">
	{
		stepPositions.map((position: StepPosition, index: number) => {
			const stepKey = STEP_KEYS[index]
			const color = STEP_COLORS[index]

			// Safety check
			if (!stepKey || !color || !position) {
				return null
			}

			return (
				<div
					class="absolute z-20 transition-transform duration-500 ease-out"
					style={`
					left: ${position.x}px; 
					top: ${position.y}px;
					transform-origin: center center;
				`}
					data-step-index={index}
				>
					<StepCard
						stepKey={stepKey}
						index={index}
						variant={stepCardVariant}
					/>
				</div>
			)
		})
	}
</div>

<style>
	.workflow-cards-container {
		position: relative;
		width: 100%;
		height: 100%;
		z-index: 2;
	}

	/* Animation for step cards on load */
	.workflow-cards-container > div {
		opacity: 0;
		animation: fadeInUp 0.6s ease-out forwards;
	}

	.workflow-cards-container > div:nth-child(1) {
		animation-delay: 0.1s;
	}
	.workflow-cards-container > div:nth-child(2) {
		animation-delay: 0.2s;
	}
	.workflow-cards-container > div:nth-child(3) {
		animation-delay: 0.3s;
	}
	.workflow-cards-container > div:nth-child(4) {
		animation-delay: 0.4s;
	}
	.workflow-cards-container > div:nth-child(5) {
		animation-delay: 0.5s;
	}

	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(20px) scale(0.9);
		}
		to {
			opacity: 1;
			transform: translateY(0) scale(1);
		}
	}
</style>
