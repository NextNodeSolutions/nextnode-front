---
import {
	CARD_DIMENSIONS,
	STEP_COLORS,
	DESKTOP_WORKFLOW_POSITIONS,
} from '../workflow-constants'
import type { Step } from '@/types/workflow'
import type { WorkflowPosition } from '@/types/workflow'

import WorkflowPath from '../visual/WorkflowPath.astro'
import StepCardWrapper from '../cards/StepCard.wrapper.astro'
import WorkflowCardsExpandable from './WorkflowCardsExpandable'

// Use new i18n system from middleware
const { t } = Astro.locals

interface Props {
	steps: Step[]
	enableExpandable?: boolean
}

const { steps, enableExpandable = false } = Astro.props

const positions = DESKTOP_WORKFLOW_POSITIONS

// ViewBox dimensions
const VIEWBOX_WIDTH = 1000
const VIEWBOX_HEIGHT = 500

// Get fixed card dimensions (will be used for position calculations)
const { width: cardWidth, height: cardHeight } = CARD_DIMENSIONS

/**
 * Calculate card position based on line direction
 * Cards are positioned at the edge closest to the line endpoint
 */
function calculateRectanglePosition(
	position: WorkflowPosition,
	width: number,
	height: number,
) {
	const { x, y, lineEndX, lineEndY } = position

	// Calculate line direction
	const deltaX = lineEndX - x
	const deltaY = lineEndY - y

	// Determine which direction is dominant
	if (Math.abs(deltaX) > Math.abs(deltaY)) {
		// Dominant horizontal movement
		if (deltaX > 0) {
			// Line goes right → card on right, line touches left edge
			return {
				x: lineEndX,
				y: lineEndY - height / 2,
			}
		} else {
			// Line goes left → card on left, line touches right edge
			return {
				x: lineEndX - width,
				y: lineEndY - height / 2,
			}
		}
	} else {
		// Dominant vertical movement
		if (deltaY > 0) {
			// Line goes down → card below, line touches top edge
			return {
				x: lineEndX - width / 2,
				y: lineEndY,
			}
		} else {
			// Line goes up → card above, line touches bottom edge
			return {
				x: lineEndX - width / 2,
				y: lineEndY - height,
			}
		}
	}
}
---

<div
	class="workflow-journey relative w-full pt-16 pb-0 md:pt-20 md:pb-12 lg:pt-40 lg:pb-16 xl:pt-48 xl:pb-20"
>
	<div class="container mx-auto px-4">
		<!-- Relative container for overlay -->
		<div class="relative aspect-[2/1] w-full">
			<!-- SVG Background with path and lines -->
			<svg
				class="absolute inset-0 h-full w-full"
				viewBox="0 0 1000 500"
				style="overflow: visible; pointer-events: none;"
				xmlns="http://www.w3.org/2000/svg"
			>
				<WorkflowPath />

				{/* Connection lines and points */}
				{
					positions.map((position, index) => {
						const color = STEP_COLORS[index]
						const step = steps[index]

						if (!step || !color) {
							return null
						}

						return (
							<g>
								{/* Connection line */}
								<line
									x1={position.x}
									y1={position.y}
									x2={position.lineEndX}
									y2={position.lineEndY}
									stroke={color}
									stroke-width="3"
									opacity="0"
									class="animate-fade-in-line"
									style={`animation-delay: ${index * 150}ms`}
								/>

								{/* Point on path */}
								<circle
									cx={position.x}
									cy={position.y}
									r="6"
									fill={color}
									stroke="white"
									stroke-width="3"
									opacity="0"
									class="animate-fade-in-point"
									style={`animation-delay: ${index * 150}ms`}
								/>
							</g>
						)
					})
				}
			</svg>

			{/* HTML container for StepCards */}
			<div class="absolute inset-0">
				{
					enableExpandable ? (
						<WorkflowCardsExpandable
							client:load
							stepLabel={t('common.stepCard.step')}
							positions={positions.map(position => {
								const rectPos = calculateRectanglePosition(
									position,
									cardWidth,
									cardHeight,
								)
								return {
									x: (rectPos.x / VIEWBOX_WIDTH) * 100,
									y: (rectPos.y / VIEWBOX_HEIGHT) * 100,
									width: (cardWidth / VIEWBOX_WIDTH) * 100,
									height: (cardHeight / VIEWBOX_HEIGHT) * 100,
								}
							})}
						/>
					) : (
						positions.map((position, index) => {
							const step = steps[index]
							if (!step) return null

							// Calculate position based on line direction
							const rectPos = calculateRectanglePosition(
								position,
								cardWidth,
								cardHeight,
							)
							const leftPercent =
								(rectPos.x / VIEWBOX_WIDTH) * 100
							const topPercent =
								(rectPos.y / VIEWBOX_HEIGHT) * 100
							const widthPercent =
								(cardWidth / VIEWBOX_WIDTH) * 100
							const heightPercent =
								(cardHeight / VIEWBOX_HEIGHT) * 100

							return (
								<div
									class="animate-fade-in-card absolute"
									style={`
										left: ${leftPercent}%;
										top: ${topPercent}%;
										width: ${widthPercent}%;
										height: ${heightPercent}%;
										animation-delay: ${index * 150}ms;
									`}
								>
									<StepCardWrapper
										stepKey={step.id}
										index={index}
									/>
								</div>
							)
						})
					)
				}
			</div>
		</div>
	</div>
</div>

<style>
	/* Styles simples et propres pour le workflow journey */
	.workflow-journey {
		user-select: none;
	}

	.step-card-group {
		opacity: 1;
	}

	/* Interactive card hover effects */
	.interactive-card {
		cursor: pointer;
	}

	/* Card pointer events */
	.animate-fade-in-card {
		pointer-events: auto;
	}

	/* Force StepCard to fit in container */
	.step-card-wrapper {
		display: flex;
		align-items: stretch;
		justify-content: stretch;
		width: 100%;
		height: 100%;
		box-sizing: border-box;
	}

	.step-card-wrapper > * {
		width: 100% !important;
		height: 100% !important;
		max-width: none !important;
		max-height: none !important;
		min-width: 100% !important;
		min-height: 100% !important;
		flex-shrink: 0;
		box-sizing: border-box;
		transform: scale(1);
	}

	/* Override StepCard's internal styles to fill container */
	.workflow-card :global(.group) {
		width: 100% !important;
		height: 100% !important;
		max-width: none !important;
		max-height: none !important;
		min-width: 100% !important;
		min-height: 100% !important;
		box-sizing: border-box;
		display: flex;
		flex-direction: column;
	}

	/* Force the main card div to fill the group */
	.workflow-card :global(.group > div) {
		width: 100% !important;
		height: 100% !important;
		flex: 1;
		box-sizing: border-box;
		display: flex;
		flex-direction: column;
	}

	/* Force content sections to distribute space properly */
	.workflow-card :global(.group > div > div:last-child) {
		flex: 1;
		display: flex;
		flex-direction: column;
		justify-content: space-between;
	}

	/* Responsive adjustments */
	@media (max-width: 768px) {
		.workflow-journey svg {
			height: 400px;
		}

		.expanded-content {
			width: 350px !important;
			height: 250px !important;
			x: 50 !important;
			y: 125 !important;
		}
	}
</style>
