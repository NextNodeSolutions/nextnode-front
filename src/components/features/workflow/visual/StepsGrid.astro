---
import { t } from '@/lib/i18n/i18n-server'
import { STEP_KEYS } from '../workflow-constants'
import StepCard from '../cards/StepCard.astro'
import { AnimatedGrid } from '@/components/ui/animation/AnimatedList'

const featuresResult = t('howWeWork.cta.features')
const features: string[] = Array.isArray(featuresResult) ? featuresResult : []
---

<section
	class="relative overflow-hidden bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50 py-20 dark:from-gray-900 dark:via-blue-950/30 dark:to-indigo-950"
	style="background-image: url(\"
	data:image
	svg+xml,%3csvg
	width="4"
	height="4"
	xmlns="http://www.w3.org/2000/svg"
	%3e%3cpath
	d="M4 0L0 0 0 4"
	fill="none"
	stroke="rgb(0 0 0 / 0.05)"
	stroke-width="0.5"
	%3e%3c
	svg%3e\")"
>
	<!-- Background effects -->
	<div
		class="absolute top-20 left-10 h-72 w-72 animate-pulse rounded-full bg-gradient-to-r from-blue-400/20 to-cyan-400/20 blur-3xl"
	>
	</div>
	<div
		class="absolute right-10 bottom-20 h-96 w-96 animate-pulse rounded-full bg-gradient-to-r from-violet-400/20 to-purple-400/20 blur-3xl [animation-delay:2s]"
	>
	</div>
	<div
		class="absolute top-1/2 left-1/2 h-[800px] w-[800px] -translate-x-1/2 -translate-y-1/2 animate-pulse rounded-full bg-gradient-to-r from-emerald-400/10 to-teal-400/10 blur-3xl [animation-delay:4s]"
	>
	</div>

	<div class="relative container mx-auto px-4">
		<div class="mb-16 space-y-6 text-center">
			<div
				class="inline-flex items-center gap-2 rounded-full border border-gray-200/50 bg-white/80 px-4 py-2 shadow-lg backdrop-blur-sm dark:border-gray-700/50 dark:bg-gray-800/80"
			>
				<div
					class="h-2 w-2 animate-pulse rounded-full bg-gradient-to-r from-blue-500 to-purple-500"
				>
				</div>
				<span
					class="text-sm font-medium tracking-wider text-gray-600 uppercase dark:text-gray-300"
					>Notre processus</span
				>
			</div>

			<h2
				class="text-4xl leading-tight font-black text-gray-900 md:text-5xl lg:text-6xl dark:text-white"
			>
				<span
					class="bg-gradient-to-r from-indigo-600 via-purple-600 to-cyan-500 bg-clip-text text-transparent"
				>
					{t('howWeWork.journey.title')}
				</span>
			</h2>

			<p
				class="mx-auto max-w-3xl text-xl leading-relaxed text-gray-600 dark:text-gray-300"
			>
				{t('howWeWork.journey.subtitle')}
			</p>
		</div>

		<AnimatedGrid
			cols={{ default: 1, md: 2, lg: 3 }}
			gap={8}
			staggerDelay={150}
			className="mx-auto max-w-7xl lg:gap-10"
			client:load
		>
			{
				STEP_KEYS.map((stepKey, index) => (
					<StepCard stepKey={stepKey} index={index} />
				))
			}
		</AnimatedGrid>

		<div class="mt-20 space-y-8 text-center">
			<div class="mx-auto max-w-3xl space-y-4">
				<h3
					class="text-2xl font-bold text-gray-900 md:text-3xl dark:text-white"
				>
					{t('howWeWork.cta.title')}
				</h3>
				<p
					class="text-lg leading-relaxed text-gray-600 dark:text-gray-300"
				>
					{t('howWeWork.cta.description')}
				</p>
			</div>

			<div
				class="flex flex-col items-center justify-center gap-4 sm:flex-row"
			>
				<button
					class="group relative transform overflow-hidden rounded-2xl bg-gradient-to-r from-indigo-600 via-purple-600 to-cyan-500 px-8 py-4 font-bold text-white shadow-xl transition-all duration-300 hover:scale-105 hover:shadow-2xl"
				>
					<div
						class="absolute inset-0 bg-gradient-to-r from-indigo-700 via-purple-700 to-cyan-600 opacity-0 transition-opacity duration-300 group-hover:opacity-100"
					>
					</div>
					<div class="relative flex items-center gap-2">
						<span>{t('howWeWork.cta.primaryButton')}</span>
						<svg
							class="h-5 w-5 transform transition-transform duration-300 group-hover:translate-x-1"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
						</svg>
					</div>
				</button>

				<button
					class="group rounded-2xl border-2 border-gray-200 bg-white/80 px-8 py-4 font-semibold text-gray-700 shadow-lg backdrop-blur-sm transition-all duration-300 hover:border-gray-300 hover:bg-white hover:shadow-xl dark:border-gray-700 dark:bg-gray-800/80 dark:text-gray-300 dark:hover:border-gray-600 dark:hover:bg-gray-800"
				>
					<div class="flex items-center gap-2">
						<span>{t('howWeWork.cta.secondaryButton')}</span>
						<svg
							class="h-5 w-5 transform transition-transform duration-300 group-hover:scale-110"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
							></path>
						</svg>
					</div>
				</button>
			</div>

			<div class="mt-8 flex flex-wrap justify-center gap-6">
				{
					features.map((feature: string) => (
						<div class="flex items-center gap-2 rounded-full border border-gray-200/50 bg-white/60 px-4 py-2 backdrop-blur-sm dark:border-gray-700/50 dark:bg-gray-800/60">
							<span class="text-sm font-medium text-gray-700 dark:text-gray-300">
								{feature}
							</span>
						</div>
					))
				}
			</div>
		</div>
	</div>
</section>
