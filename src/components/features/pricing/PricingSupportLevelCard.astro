---
import { cva } from 'class-variance-authority'
import { cn } from '@/lib/core/utils'
import { getAnimationDelayClass } from '@/lib/config/pricing/pricing-animation-config'

const { t } = Astro.locals

interface SupportLevel {
	readonly name: string
	readonly price?: string
	readonly responseTime: string
	readonly availability?: string
	readonly description: string
	readonly features: readonly string[]
	readonly suitable: string
}

export interface Props {
	level: SupportLevel
	index: number
	isIncluded: boolean
}

const { level, index, isIncluded } = Astro.props

// Card container variants
const cardVariants = cva(
	[
		'group rounded-2xl border border-gray-200/50 p-6 sm:p-8',
		'bg-white/80 backdrop-blur-sm',
		'dark:border-gray-700/50 dark:bg-gray-800/80',
		'transition-all duration-500',
		'hover:-translate-y-1 md:hover:scale-105',
		'opacity-0',
	],
	{
		variants: {
			colorVariant: {
				green: 'shadow-brand-green ring-brand-green/10 ring-1',
				blue: 'shadow-brand-blue ring-brand-blue/10 ring-1',
				dark: 'shadow-brand-blue-dark ring-brand-blue-dark/10 ring-1',
			},
		},
	},
)

// Badge variants for "Already included"
const badgeVariants = cva(
	[
		'inline-flex items-center gap-2 rounded-full px-4 py-3 text-base font-semibold',
		'border transition-all duration-300 hover:scale-105',
		'animate-badge-pulse-soft',
	],
	{
		variants: {
			colorVariant: {
				green: [
					'border-brand-green/20 bg-brand-green/10 text-brand-green-dark border',
					'dark:border-brand-green/50 dark:bg-brand-green/30 dark:text-brand-green',
					'hover:bg-brand-green/20 dark:hover:bg-brand-green/50',
				],
				blue: '',
				dark: '',
			},
		},
	},
)

// Price variants
const priceVariants = cva('text-3xl font-bold', {
	variants: {
		colorVariant: {
			green: '',
			blue: 'text-brand-blue dark:text-brand-blue',
			dark: 'text-brand-blue-dark dark:text-brand-blue-dark',
		},
	},
})

// Checkmark icon container variants
const checkmarkVariants = cva(
	'mt-0.5 flex h-5 w-5 items-center justify-center rounded-full flex-shrink-0',
	{
		variants: {
			colorVariant: {
				green: 'bg-brand-green',
				blue: 'bg-brand-blue',
				dark: 'bg-brand-blue-dark',
			},
		},
	},
)

// Determine color variant based on index
const colorVariant = index === 0 ? 'green' : index === 1 ? 'blue' : 'dark'

// Calculate animation delay
const baseDelay = 400
const cardDelayClass = getAnimationDelayClass(baseDelay, index, 200)
---

<div
	class={cn(cardVariants({ colorVariant }), cardDelayClass)}
	data-animate="animate-slide-in-gentle"
>
	<!-- Level Header -->
	<div class="mb-6 text-center">
		<h3 class="mb-2 text-xl font-bold text-gray-900 dark:text-white">
			{level.name}
		</h3>
		<div class="mb-4">
			<div class="mb-1">
				{
					isIncluded ? (
						<span class={cn(badgeVariants({ colorVariant }))}>
							<svg
								class="h-5 w-5"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
								/>
							</svg>
							{t('pricing.sections.alreadyIncluded')}
						</span>
					) : (
						<div class={cn(priceVariants({ colorVariant }))}>
							{level.price}
						</div>
					)
				}
			</div>
			<div class="text-sm text-gray-600 dark:text-gray-400">
				{t('pricing.support.responseLabel')}
				{level.responseTime}
			</div>
		</div>
		<p class="text-sm leading-relaxed text-gray-700 dark:text-gray-300">
			{level.description}
		</p>
	</div>

	<!-- Features -->
	<div class="mb-6">
		<ul class="space-y-3">
			{
				level.features.map((feature: string) => (
					<li class="flex items-start gap-3">
						<div class={cn(checkmarkVariants({ colorVariant }))}>
							<svg
								class="h-3 w-3 text-white"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M5 13l4 4L19 7"
								/>
							</svg>
						</div>
						<span class="text-sm leading-relaxed text-gray-700 dark:text-gray-300">
							{feature}
						</span>
					</li>
				))
			}
		</ul>
	</div>

	<!-- Suitable For -->
	<div class="mt-auto">
		<div
			class={cn(
				'rounded-lg p-4 text-center',
				'bg-gray-50 dark:bg-gray-800/50',
				'border border-gray-200/50 dark:border-gray-600/50',
			)}
		>
			<div
				class="mb-1 text-xs font-semibold text-gray-600 dark:text-gray-400"
			>
				{t('pricing.sections.idealFor')}
			</div>
			<div class="text-sm font-medium text-gray-900 dark:text-gray-100">
				{level.suitable}
			</div>
		</div>
	</div>
</div>
