---
import { cn } from '@/lib/core/utils'
import { Zap, Shield, Rocket, Infinity, Brain, Search } from 'lucide-react'
import OrbitingTech from './OrbitingTech'
import { TransformationBeams } from './TransformationBeams'

const { t } = Astro.locals

const benefits = [
	{
		id: 'mentalHealth',
		icon: Brain,
		title: t('home.techTransform.benefits.mentalHealth.title'),
		description: t('home.techTransform.benefits.mentalHealth.description'),
		metric: t('home.techTransform.benefits.mentalHealth.metric'),
		hero: true, // Main hero card
	},
	{
		id: 'seoGrowth',
		icon: Search,
		title: t('home.techTransform.benefits.seoGrowth.title'),
		description: t('home.techTransform.benefits.seoGrowth.description'),
		metric: t('home.techTransform.benefits.seoGrowth.metric'),
	},
	{
		id: 'performance',
		icon: Zap,
		title: t('home.techTransform.benefits.performance.title'),
		description: t('home.techTransform.benefits.performance.description'),
		metric: t('home.techTransform.benefits.performance.metric'),
	},
	{
		id: 'security',
		icon: Shield,
		title: t('home.techTransform.benefits.security.title'),
		description: t('home.techTransform.benefits.security.description'),
		metric: t('home.techTransform.benefits.security.metric'),
	},
	{
		id: 'speed',
		icon: Rocket,
		title: t('home.techTransform.benefits.speed.title'),
		description: t('home.techTransform.benefits.speed.description'),
		metric: t('home.techTransform.benefits.speed.metric'),
	},
	{
		id: 'scalability',
		icon: Infinity,
		title: t('home.techTransform.benefits.scalability.title'),
		description: t('home.techTransform.benefits.scalability.description'),
		metric: t('home.techTransform.benefits.scalability.metric'),
	},
]

const heroBenefit = benefits.find(b => b.hero)
const regularBenefits = benefits.filter(b => !b.hero)
---

<section
	class={cn(
		'relative overflow-hidden py-24 sm:py-32',
		'bg-gradient-to-br from-gray-50/80 via-white/80 to-gray-50/80',
		'dark:from-brand-black/90 dark:via-brand-charcoal/80 dark:to-brand-black/90',
	)}
>
	<!-- Grid Pattern Background -->
	<div class="absolute inset-0 opacity-[0.03] dark:opacity-[0.05]">
		<div
			class="absolute inset-0 bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px]"
		>
		</div>
	</div>

	<!-- Decorative elements -->
	<div
		class="bg-brand-green-soft/20 dark:bg-brand-green-soft/30 absolute top-20 right-10 h-96 w-96 animate-pulse rounded-full opacity-40 blur-3xl"
	>
	</div>
	<div
		class="animation-delay-2000 bg-brand-blue-soft/20 dark:bg-brand-blue-soft/30 absolute bottom-20 left-10 h-96 w-96 animate-pulse rounded-full opacity-40 blur-3xl"
	>
	</div>

	<div
		class="relative mx-auto max-w-7xl px-6 sm:px-8 lg:px-12"
		id="tech-transform-section"
	>
		<!-- Section Header -->
		<div class="mb-16 space-y-6 text-center">
			<h2
				class={cn(
					'tech-animate tech-animate-fade-in-up text-3xl font-bold tracking-tight sm:text-4xl lg:text-5xl',
					'text-gray-900 dark:text-white',
				)}
				data-delay="0"
			>
				{t('home.techTransform.title')}
			</h2>
			<p
				class="tech-animate tech-animate-fade-in-up mx-auto max-w-3xl text-lg text-gray-600 sm:text-xl dark:text-gray-400"
				data-delay="300"
			>
				{t('home.techTransform.subtitle')}
			</p>
		</div>

		<!-- Transformation Container -->
		<div
			class="grid grid-cols-1 items-center gap-12 lg:grid-cols-12 lg:gap-0"
		>
			<!-- Technologies Cloud (Left) -->
			<div
				class={cn(
					'lg:col-span-5',
					'tech-animate tech-animate-fade-in-up',
				)}
				data-delay="600"
			>
				<div
					class={cn(
						'relative rounded-3xl p-8 sm:p-10',
						'dark:bg-brand-charcoal/50 bg-white/50',
						'backdrop-blur-sm',
						'border-2 border-gray-200/50 dark:border-brand-soft-black/50',
					)}
				>
					<h3
						class="mb-6 text-center text-xl font-semibold text-gray-900 dark:text-white"
					>
						{t('home.techTransform.techSection.title')}
					</h3>

					<!-- Orbiting Technologies -->
					<OrbitingTech client:only="react" />
				</div>
			</div>

			<!-- Transformation Beams (Center) -->
			<div
				class={cn(
					'lg:col-span-2',
					'tech-animate tech-animate-fade-in',
					'flex items-center justify-center',
					'py-8 lg:py-0',
				)}
				data-delay="900"
			>
				<div class="relative h-[250px] w-full">
					<TransformationBeams client:load />
				</div>
			</div>

			<!-- Benefits Bento Grid (Right) -->
			<div
				class={cn(
					'lg:col-span-5',
					'tech-animate tech-animate-fade-in-up',
				)}
				data-delay="1200"
			>
				<div
					class={cn(
						'rounded-3xl p-6 sm:p-8',
						'dark:bg-brand-charcoal/50 bg-white/50',
						'backdrop-blur-sm',
						'border-2 border-gray-200/50 dark:border-brand-soft-black/50',
					)}
				>
					<h3
						class="mb-6 text-center text-xl font-semibold text-gray-900 dark:text-white"
					>
						{t('home.techTransform.benefitsSection.title')}
					</h3>

					<!-- Bento Grid Layout -->
					<div class="benefits-bento-grid">
						<!-- Hero Card (Mental Health) -->
						{
							heroBenefit && (
								<div
									class={cn(
										'group relative overflow-hidden',
										'rounded-2xl p-6',
										'dark:bg-brand-soft-black bg-gradient-to-br from-gray-50 to-gray-100',
										'dark:from-brand-soft-black dark:to-brand-black',
										'dark:border-brand-black border-2 border-gray-300',
										'transition-all duration-500',
										'hover:scale-[1.02] hover:shadow-2xl',
										'cursor-pointer',
										'benefit-card-hero',
										'bento-hero',
										'tech-animate',
									)}
									data-delay="1400"
								>
									{/* Animated gradient background */}
									<div class="gradient-animated absolute inset-0 opacity-20" />

									<div class="relative z-10 flex h-full flex-col justify-between gap-4">
										{/* Icon with pulse animation */}
										<div
											class={cn(
												'w-fit flex-shrink-0 rounded-xl p-3',
												'from-brand-blue to-brand-green bg-gradient-to-br',
												'shadow-lg',
												'icon-pulse',
											)}
										>
											<heroBenefit.icon className="h-8 w-8 text-white" />
										</div>

										<div class="flex-1 space-y-3">
											<h4 class="text-xl font-bold text-gray-900 dark:text-white">
												{heroBenefit.title}
											</h4>
											<p class="text-sm leading-relaxed text-gray-600 dark:text-gray-400">
												{heroBenefit.description}
											</p>
										</div>

										{/* Metric badge */}
										<div class="flex justify-end">
											<span
												class={cn(
													'text-2xl font-black',
													'from-brand-green to-brand-blue bg-gradient-to-r bg-clip-text text-transparent',
												)}
											>
												{heroBenefit.metric}
											</span>
										</div>
									</div>

									{/* Glow effect on hover */}
									<div class="from-brand-green/5 to-brand-blue/5 absolute inset-0 translate-y-full bg-gradient-to-t transition-transform duration-500 group-hover:translate-y-0" />
								</div>
							)
						}

						<!-- Regular Cards Grid -->
						{
							regularBenefits.map((benefit, index) => (
								<div
									class={cn(
										'group relative overflow-hidden',
										'rounded-xl p-4',
										'dark:bg-brand-soft-black bg-gray-100',
										'dark:border-brand-black border border-gray-300',
										'transition-all duration-300',
										'hover:-translate-y-1 hover:scale-[1.03] hover:shadow-lg',
										'cursor-pointer',
										'benefit-card',
										'bento-card',
										'tech-animate',
									)}
									data-delay={index * 100 + 1500}
								>
									<div class="relative z-10 space-y-3">
										<div class="flex items-start justify-between gap-2">
											<div
												class={cn(
													'flex-shrink-0 rounded-lg p-2',
													'from-brand-blue to-brand-green bg-gradient-to-br',
													'shadow-md',
												)}
											>
												<benefit.icon className="h-4 w-4 text-white" />
											</div>
											<span
												class={cn(
													'text-lg font-bold',
													'from-brand-green to-brand-blue bg-gradient-to-r bg-clip-text text-transparent',
												)}
											>
												{benefit.metric}
											</span>
										</div>

										<h4 class="text-sm leading-tight font-semibold text-gray-900 dark:text-white">
											{benefit.title}
										</h4>

										<p class="text-xs leading-relaxed text-gray-600 dark:text-gray-400">
											{benefit.description}
										</p>
									</div>

									{/* Subtle glow on hover */}
									<div class="from-brand-green/10 to-brand-blue/10 absolute inset-0 translate-x-full bg-gradient-to-r transition-transform duration-300 group-hover:translate-x-0" />
								</div>
							))
						}
					</div>
				</div>
			</div>
		</div>

		<!-- Bottom CTA Message -->
		<div
			class={cn('tech-animate tech-animate-fade-in-up mt-16 text-center')}
			data-delay="1800"
		>
			<p
				class={cn(
					'mx-auto max-w-3xl text-lg font-medium',
					'text-gray-700 dark:text-gray-300',
				)}
			>
				{t('home.techTransform.ctaMessage')}
			</p>
		</div>
	</div>
</section>

<style>
	/* Initial state - hidden before animation trigger */
	.tech-animate:not(.tech-animated) {
		opacity: 0;
	}

	/* Triggered animation state */
	.tech-animate.tech-animating.tech-animate-fade-in-up {
		animation: fadeInUp 0.8s ease-out forwards;
	}

	.tech-animate.tech-animating.tech-animate-fade-in {
		animation: fadeIn 0.8s ease-out forwards;
	}

	/* Final state after animation - visible and stable */
	.tech-animate.tech-animated {
		opacity: 1;
		transform: none;
	}

	/* Animations */
	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(30px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	@keyframes float {
		0%,
		100% {
			transform: translate(0, 0);
		}
		33% {
			transform: translate(20px, -20px);
		}
		66% {
			transform: translate(-20px, 20px);
		}
	}

	@keyframes pulseRing {
		0% {
			transform: scale(1);
			opacity: 0.5;
		}
		100% {
			transform: scale(2);
			opacity: 0;
		}
	}

	@keyframes gradientShift {
		0% {
			background-position: 0% 50%;
		}
		50% {
			background-position: 100% 50%;
		}
		100% {
			background-position: 0% 50%;
		}
	}

	@keyframes iconPulse {
		0%,
		100% {
			transform: scale(1);
			box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);
		}
		50% {
			transform: scale(1.05);
			box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);
		}
	}

	/* Bento Grid Layout */
	.benefits-bento-grid {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		grid-template-rows: repeat(3, auto);
		gap: 1rem;
		grid-template-areas:
			'hero hero'
			'card1 card2'
			'card3 card4'
			'card5 card5';
	}

	.bento-hero {
		grid-area: hero;
		min-height: 200px;
	}

	.bento-card:nth-of-type(1) {
		grid-area: card1;
	}
	.bento-card:nth-of-type(2) {
		grid-area: card2;
	}
	.bento-card:nth-of-type(3) {
		grid-area: card3;
	}
	.bento-card:nth-of-type(4) {
		grid-area: card4;
	}
	.bento-card:nth-of-type(5) {
		grid-area: card5;
	}

	/* Gradient Animation for Hero Card */
	.gradient-animated {
		background: linear-gradient(
			135deg,
			var(--brand-blue) 0%,
			var(--brand-green) 50%,
			var(--brand-blue) 100%
		);
		background-size: 200% 200%;
		animation: gradientShift 8s ease infinite;
	}

	/* Icon Pulse Animation */
	.icon-pulse {
		animation: iconPulse 2s ease-in-out infinite;
	}

	/* 3D Hover Effect Enhancement */
	.benefit-card:hover,
	.benefit-card-hero:hover {
		transform: translateY(-8px) scale(1.02);
		box-shadow: 0 20px 40px -10px rgba(59, 130, 246, 0.3);
	}

	/* Mobile: Single Column Stack */
	@media (max-width: 640px) {
		.benefits-bento-grid {
			grid-template-columns: 1fr;
			grid-template-areas:
				'hero'
				'card1'
				'card2'
				'card3'
				'card4'
				'card5';
		}

		.bento-hero {
			min-height: 220px;
		}
	}

	.animation-delay-2000 {
		animation-delay: 2s;
	}
</style>

<script>
	// Intersection Observer pour déclencher les animations une seule fois
	const observeSection = () => {
		const section = document.getElementById('tech-transform-section')
		if (!section) return

		// Trouver tous les éléments à animer
		const animatedElements = section.querySelectorAll('.tech-animate')

		// Si déjà animés, ne rien faire
		const firstElement = animatedElements[0]
		if (
			animatedElements.length > 0 &&
			firstElement &&
			firstElement.classList.contains('tech-animated')
		) {
			return
		}

		const observer = new IntersectionObserver(
			entries => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						// Déclencher les animations avec délais
						animatedElements.forEach(element => {
							const delay = parseInt(
								element.getAttribute('data-delay') || '0',
								10,
							)

							setTimeout(() => {
								// Ajouter classe d'animation
								element.classList.add('tech-animating')

								// Après l'animation, marquer comme terminé
								setTimeout(() => {
									element.classList.add('tech-animated')
									element.classList.remove('tech-animating')
								}, 800) // Durée de l'animation (0.8s)
							}, delay)
						})

						// Déconnecter l'observer après la première animation
						observer.disconnect()
					}
				})
			},
			{
				threshold: 0.1, // Trigger quand 10% de la section est visible
				rootMargin: '0px',
			},
		)

		observer.observe(section)
	}

	// Exécuter au chargement de la page
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', observeSection)
	} else {
		observeSection()
	}

	// Réexécuter lors de la navigation Astro
	document.addEventListener('astro:page-load', observeSection)
</script>
