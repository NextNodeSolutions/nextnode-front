---
/**
 * BaseCard Astro wrapper - Allows using BaseCard in Astro components
 * Provides the same patterns as BaseCard.tsx but for Astro usage
 */

import { cn } from '@/lib/core/utils'

export interface Props {
	/** Layout variant */
	variant?: 'mini' | 'compact' | 'standard' | 'large'
	/** Card layout type */
	layout?: 'simple' | 'with-header' | 'with-icon'
	/** Additional className */
	className?: string
	/** Accent color for theming */
	color?: string
	/** Enable glassmorphic styling */
	glassmorphic?: boolean
	/** Background pattern type */
	pattern?: 'dots' | 'geometric' | 'none'
	/** Hover animation type */
	hover?: 'none' | 'lift-sm' | 'lift' | 'lift-lg'
	/** Animation delay for staggered animations */
	animationDelay?: number
	/** Icon character or HTML */
	icon?: string
	/** Card title */
	title?: string
	/** Card description */
	description?: string
	/** Badge configuration */
	badge?: { text: string; color: string }
	/** Make card clickable */
	clickable?: boolean
	/** Disabled state */
	disabled?: boolean
}

const {
	variant = 'standard',
	layout = 'simple',
	className,
	color,
	glassmorphic = false,
	pattern = 'none',
	hover = 'lift',
	animationDelay = 0,
	icon,
	title,
	description,
	badge,
	clickable = false,
	disabled = false,
} = Astro.props

const CARD_VARIANTS = {
	mini: {
		container: 'p-2',
		title: 'text-sm',
		description: 'text-xs',
		icon: 'text-base h-6 w-6',
		spacing: 'space-y-1',
	},
	compact: {
		container: 'p-3',
		title: 'text-base',
		description: 'text-sm',
		icon: 'text-lg h-8 w-8',
		spacing: 'space-y-2',
	},
	standard: {
		container: 'p-6',
		title: 'text-xl',
		description: 'text-base',
		icon: 'text-2xl h-12 w-12',
		spacing: 'space-y-4',
	},
	large: {
		container: 'p-8',
		title: 'text-2xl',
		description: 'text-lg',
		icon: 'text-3xl h-16 w-16',
		spacing: 'space-y-6',
	},
}

const HOVER_VARIANTS = {
	none: '',
	'lift-sm': 'hover-lift-sm',
	lift: 'hover-lift',
	'lift-lg': 'hover-lift-lg',
}

const LAYOUT_VARIANTS = {
	simple: 'flex flex-col',
	'with-header': 'overflow-hidden',
	'with-icon': 'flex items-start gap-4',
}

const variantStyles = CARD_VARIANTS[variant]
const hoverClass = HOVER_VARIANTS[hover]
const layoutClass = LAYOUT_VARIANTS[layout]

// Generate unique pattern ID
const patternId = `card-pattern-${pattern}-${Math.random().toString(36).slice(2)}`
---

<div
	class={cn(
		// Base card styling
		glassmorphic ? 'card-container' : 'card-base',
		// Layout and spacing
		variantStyles.container,
		// Interaction states
		clickable && 'cursor-pointer',
		disabled && 'pointer-events-none opacity-50',
		// Hover effects
		!disabled && hoverClass,
		// Group for child hover effects
		'group relative',
		// Transition
		'transition-smooth',
		className,
	)}
	style={animationDelay > 0
		? `animation-delay: ${animationDelay}ms`
		: undefined}
>
	<!-- Background Pattern -->
	{
		pattern !== 'none' && (
			<div class="absolute inset-0 opacity-5 transition-opacity duration-500 group-hover:opacity-10">
				<svg viewBox="0 0 100 100" class="h-full w-full">
					<defs>
						<pattern
							id={patternId}
							x="0"
							y="0"
							width="10"
							height="10"
							patternUnits="userSpaceOnUse"
						>
							{pattern === 'dots' && (
								<circle
									cx="5"
									cy="5"
									r="1"
									fill="currentColor"
								/>
							)}
							{pattern === 'geometric' && (
								<>
									<circle
										cx="2"
										cy="2"
										r="1"
										fill="currentColor"
									/>
									<circle
										cx="8"
										cy="8"
										r="1"
										fill="currentColor"
									/>
									<rect
										x="4"
										y="4"
										width="2"
										height="2"
										fill="currentColor"
									/>
								</>
							)}
						</pattern>
					</defs>
					<rect
						width="100"
						height="100"
						fill={`url(#${patternId})`}
					/>
				</svg>
			</div>
		)
	}

	<!-- Color accent glow effect -->
	{
		color && (
			<div
				class="absolute -inset-1 rounded-2xl bg-gradient-to-r opacity-0 blur transition-all duration-500 group-hover:opacity-20"
				style={`background: linear-gradient(135deg, ${color}40, ${color}20)`}
			/>
		)
	}

	<!-- Header Section (slot) -->
	{
		layout === 'with-header' && (
			<div
				class={cn('relative overflow-hidden bg-gradient-to-br')}
				style={
					color
						? `background: linear-gradient(135deg, ${color}10, ${color}05)`
						: undefined
				}
			>
				{pattern !== 'none' && (
					<div class="absolute inset-0 opacity-5 transition-opacity duration-500 group-hover:opacity-10">
						<svg viewBox="0 0 100 100" class="h-full w-full">
							<defs>
								<pattern
									id={`${patternId}-header`}
									x="0"
									y="0"
									width="10"
									height="10"
									patternUnits="userSpaceOnUse"
								>
									{pattern === 'dots' && (
										<circle
											cx="5"
											cy="5"
											r="1"
											fill="currentColor"
										/>
									)}
								</pattern>
							</defs>
							<rect
								width="100"
								height="100"
								fill={`url(#${patternId}-header)`}
							/>
						</svg>
					</div>
				)}
				<div class="relative z-10">
					<slot name="header" />
				</div>
			</div>
		)
	}

	<!-- Main Content -->
	<div class={cn('relative z-10', layoutClass, variantStyles.spacing)}>
		<!-- Badge -->
		{
			badge && (
				<div class="mb-2 flex items-center">
					<span
						class="rounded-full px-2 py-1 text-xs font-bold text-white"
						style={`background-color: ${badge.color}`}
					>
						{badge.text}
					</span>
				</div>
			)
		}

		<!-- Icon & Content for with-icon layout -->
		{
			layout === 'with-icon' && icon && (
				<div
					class={cn(
						'flex-shrink-0 rounded-xl transition-transform duration-300 group-hover:scale-110',
						variantStyles.icon,
						color
							? 'flex items-center justify-center'
							: 'flex items-center justify-center bg-gray-50 dark:bg-gray-700',
					)}
					style={
						color
							? `background-color: ${color}15; color: ${color}`
							: undefined
					}
				>
					<span class={cn(variantStyles.icon)} set:html={icon} />
				</div>
			)
		}

		<!-- Content wrapper for with-icon layout -->
		<div class={cn(layout === 'with-icon' && 'flex-1 min-w-0')}>
			<!-- Icon for simple layout -->
			{
				layout === 'simple' && icon && (
					<div class="mb-3 flex justify-center">
						<div
							class={cn(
								'flex items-center justify-center rounded-xl transition-transform duration-300 group-hover:scale-110',
								variantStyles.icon,
								color ? '' : 'bg-gray-50 dark:bg-gray-700',
							)}
							style={
								color
									? `background-color: ${color}15; color: ${color}`
									: undefined
							}
						>
							<span class={variantStyles.icon} set:html={icon} />
						</div>
					</div>
				)
			}

			<!-- Title -->
			{
				title && (
					<h3
						class={cn(
							'text-heading font-bold',
							variantStyles.title,
							layout === 'with-icon'
								? 'mb-1'
								: 'mb-2 text-center',
						)}
					>
						{title}
					</h3>
				)
			}

			<!-- Description -->
			{
				description && (
					<p
						class={cn(
							'text-muted leading-relaxed',
							variantStyles.description,
							layout === 'simple' ? 'text-center' : '',
						)}
					>
						{description}
					</p>
				)
			}

			<!-- Default slot for custom content -->
			<slot />
		</div>

		<!-- Actions slot -->
		<div class="mt-auto">
			<slot name="actions" />
		</div>
	</div>

	<!-- Hover indicator bar -->
	{
		color && (
			<div
				class="absolute right-0 bottom-0 left-0 h-1 origin-left scale-x-0 transform rounded-b-2xl transition-transform duration-300 group-hover:scale-x-100"
				style={`background-color: ${color}`}
			/>
		)
	}
</div>
