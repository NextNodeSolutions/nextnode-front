---
/**
 * AnimatedList Astro wrapper - Provides staggered animations for lists
 * Eliminates repetitive animation-delay inline styles
 */

import { cn } from '@/lib/core/utils'

export interface Props {
	/** Animation delay between items in milliseconds */
	staggerDelay?: number
	/** Base animation class */
	animationClass?: string
	/** Container className */
	className?: string
	/** Container element type */
	as?: string
	/** Enable grid layout */
	grid?: boolean
	/** Grid columns */
	cols?: string
	/** Gap between items */
	gap?: string
}

const {
	staggerDelay = 100,
	animationClass = 'animate-fade-in-up',
	className,
	as = 'div',
	grid = false,
	cols = 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
	gap = 'gap-8',
} = Astro.props

const Element = as
const containerClass = grid ? cn('grid', cols, gap, className) : className
---

<Element class={containerClass}>
	<slot />
</Element>

<script define:vars={{ staggerDelay, animationClass }}>
	// Apply staggered animations to children
	document.addEventListener('DOMContentLoaded', () => {
		const container = document.currentScript?.parentElement
		if (!container) return

		const children = container.children
		Array.from(children).forEach((child, index) => {
			if (child instanceof HTMLElement) {
				child.classList.add(animationClass)
				child.style.animationDelay = `${index * staggerDelay}ms`
			}
		})
	})
</script>

<style>
	/* Default animation for items */
	.animate-fade-in-up {
		opacity: 0;
		transform: translateY(20px);
		animation: fadeInUp 0.6s ease-out forwards;
	}

	@keyframes fadeInUp {
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>
